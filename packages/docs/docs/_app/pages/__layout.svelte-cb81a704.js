var We=Object.defineProperty,Xe=Object.defineProperties;var Ze=Object.getOwnPropertyDescriptors;var _e=Object.getOwnPropertySymbols;var $e=Object.prototype.hasOwnProperty,en=Object.prototype.propertyIsEnumerable;var Te=(o,e,n)=>e in o?We(o,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[e]=n,ie=(o,e)=>{for(var n in e||(e={}))$e.call(e,n)&&Te(o,n,e[n]);if(_e)for(var n of _e(e))en.call(e,n)&&Te(o,n,e[n]);return o},ce=(o,e)=>Xe(o,Ze(e));import{S as V,i as z,s as J,I as H,C as q,e as Q,c as E,a as M,d as v,J as R,K as S,g as G,L as U,M as Y,N as B,z as te,q as b,o as _,O as F,P as K,l as D,n as ee,p as ne,Q as de,t as se,R as me,h as re,T as N,j as ue,b as X,U as Se,E as le,w as O,x as C,y as A,V as ae,B as x,G as ge,W as pe,X as oe,Y as Je,Z as ye,k as Z,m as $,_ as He,$ as be,a0 as nn,v as tn,a1 as an,A as on,a2 as sn,a3 as ve,a4 as rn}from"../chunks/index-6be2ca5a.js";import{C as Ue,t as he,a as ln,_ as un,h as cn,s as Le,p as pn}from"../chunks/pages-50375376.js";import{w as hn,b as dn}from"../chunks/paths-da68c3a9.js";import{C as Ie}from"../chunks/ChevronDown-3c5ab565.js";function mn(o){let e,n;const t=o[3].default,a=H(t,o,o[2],null);let i=[{id:o[0]},o[1]],s={};for(let r=0;r<i.length;r+=1)s=q(s,i[r]);return{c(){e=Q("main"),a&&a.c(),this.h()},l(r){e=E(r,"MAIN",{id:!0});var l=M(e);a&&a.l(l),l.forEach(v),this.h()},h(){R(e,s),S(e,"bx--content",!0)},m(r,l){G(r,e,l),a&&a.m(e,null),n=!0},p(r,[l]){a&&a.p&&(!n||l&4)&&U(a,t,r,r[2],n?B(t,r[2],l,null):Y(r[2]),null),R(e,s=te(i,[(!n||l&1)&&{id:r[0]},l&2&&r[1]])),S(e,"bx--content",!0)},i(r){n||(b(a,r),n=!0)},o(r){_(a,r),n=!1},d(r){r&&v(e),a&&a.d(r)}}}function fn(o,e,n){const t=["id"];let a=F(e,t),{$$slots:i={},$$scope:s}=e,{id:r="main-content"}=e;return o.$$set=l=>{e=q(q({},e),K(l)),n(1,a=F(e,t)),"id"in l&&n(0,r=l.id),"$$scope"in l&&n(2,s=l.$$scope)},[r,a,s,i]}class gn extends V{constructor(e){super(),z(this,e,fn,mn,J,{id:0})}}var yn=gn;const bn=o=>({props:o&2}),qe=o=>({props:o[1]});function vn(o){let e,n;const t=o[9].default,a=H(t,o,o[8],null);let i=[o[1]],s={};for(let r=0;r<i.length;r+=1)s=q(s,i[r]);return{c(){e=Q("div"),a&&a.c(),this.h()},l(r){e=E(r,"DIV",{});var l=M(e);a&&a.l(l),l.forEach(v),this.h()},h(){R(e,s)},m(r,l){G(r,e,l),a&&a.m(e,null),n=!0},p(r,l){a&&a.p&&(!n||l&256)&&U(a,t,r,r[8],n?B(t,r[8],l,null):Y(r[8]),null),R(e,s=te(i,[l&2&&r[1]]))},i(r){n||(b(a,r),n=!0)},o(r){_(a,r),n=!1},d(r){r&&v(e),a&&a.d(r)}}}function wn(o){let e;const n=o[9].default,t=H(n,o,o[8],qe);return{c(){t&&t.c()},l(a){t&&t.l(a)},m(a,i){t&&t.m(a,i),e=!0},p(a,i){t&&t.p&&(!e||i&258)&&U(t,n,a,a[8],e?B(n,a[8],i,bn):Y(a[8]),qe)},i(a){e||(b(t,a),e=!0)},o(a){_(t,a),e=!1},d(a){t&&t.d(a)}}}function _n(o){let e,n,t,a;const i=[wn,vn],s=[];function r(l,h){return l[0]?0:1}return e=r(o),n=s[e]=i[e](o),{c(){n.c(),t=D()},l(l){n.l(l),t=D()},m(l,h){s[e].m(l,h),G(l,t,h),a=!0},p(l,[h]){let c=e;e=r(l),e===c?s[e].p(l,h):(ee(),_(s[c],1,1,()=>{s[c]=null}),ne(),n=s[e],n?n.p(l,h):(n=s[e]=i[e](l),n.c()),b(n,1),n.m(t.parentNode,t))},i(l){a||(b(n),a=!0)},o(l){_(n),a=!1},d(l){s[e].d(l),l&&v(t)}}}function Tn(o,e,n){let t;const a=["as","condensed","narrow","noGutter","noGutterLeft","noGutterRight","padding"];let i=F(e,a),{$$slots:s={},$$scope:r}=e,{as:l=!1}=e,{condensed:h=!1}=e,{narrow:c=!1}=e,{noGutter:m=!1}=e,{noGutterLeft:d=!1}=e,{noGutterRight:u=!1}=e,{padding:f=!1}=e;return o.$$set=g=>{e=q(q({},e),K(g)),n(10,i=F(e,a)),"as"in g&&n(0,l=g.as),"condensed"in g&&n(2,h=g.condensed),"narrow"in g&&n(3,c=g.narrow),"noGutter"in g&&n(4,m=g.noGutter),"noGutterLeft"in g&&n(5,d=g.noGutterLeft),"noGutterRight"in g&&n(6,u=g.noGutterRight),"padding"in g&&n(7,f=g.padding),"$$scope"in g&&n(8,r=g.$$scope)},o.$$.update=()=>{n(1,t=ce(ie({},i),{class:[i.class,"bx--row",h&&"bx--row--condensed",c&&"bx--row--narrow",m&&"bx--no-gutter",d&&"bx--no-gutter--left",u&&"bx--no-gutter--right",f&&"bx--row-padding"].filter(Boolean).join(" ")}))},[l,t,h,c,m,d,u,f,r,s]}class Sn extends V{constructor(e){super(),z(this,e,Tn,_n,J,{as:0,condensed:2,narrow:3,noGutter:4,noGutterLeft:5,noGutterRight:6,padding:7})}}var Ln=Sn;const In=o=>({props:o&2}),ke=o=>({props:o[1]});function qn(o){let e,n;const t=o[10].default,a=H(t,o,o[9],null);let i=[o[1]],s={};for(let r=0;r<i.length;r+=1)s=q(s,i[r]);return{c(){e=Q("div"),a&&a.c(),this.h()},l(r){e=E(r,"DIV",{});var l=M(e);a&&a.l(l),l.forEach(v),this.h()},h(){R(e,s)},m(r,l){G(r,e,l),a&&a.m(e,null),n=!0},p(r,l){a&&a.p&&(!n||l&512)&&U(a,t,r,r[9],n?B(t,r[9],l,null):Y(r[9]),null),R(e,s=te(i,[l&2&&r[1]]))},i(r){n||(b(a,r),n=!0)},o(r){_(a,r),n=!1},d(r){r&&v(e),a&&a.d(r)}}}function kn(o){let e;const n=o[10].default,t=H(n,o,o[9],ke);return{c(){t&&t.c()},l(a){t&&t.l(a)},m(a,i){t&&t.m(a,i),e=!0},p(a,i){t&&t.p&&(!e||i&514)&&U(t,n,a,a[9],e?B(n,a[9],i,In):Y(a[9]),ke)},i(a){e||(b(t,a),e=!0)},o(a){_(t,a),e=!1},d(a){t&&t.d(a)}}}function Gn(o){let e,n,t,a;const i=[kn,qn],s=[];function r(l,h){return l[0]?0:1}return e=r(o),n=s[e]=i[e](o),{c(){n.c(),t=D()},l(l){n.l(l),t=D()},m(l,h){s[e].m(l,h),G(l,t,h),a=!0},p(l,[h]){let c=e;e=r(l),e===c?s[e].p(l,h):(ee(),_(s[c],1,1,()=>{s[c]=null}),ne(),n=s[e],n?n.p(l,h):(n=s[e]=i[e](l),n.c()),b(n,1),n.m(t.parentNode,t))},i(l){a||(b(n),a=!0)},o(l){_(n),a=!1},d(l){s[e].d(l),l&&v(t)}}}function Pn(o,e,n){let t;const a=["as","condensed","narrow","fullWidth","noGutter","noGutterLeft","noGutterRight","padding"];let i=F(e,a),{$$slots:s={},$$scope:r}=e,{as:l=!1}=e,{condensed:h=!1}=e,{narrow:c=!1}=e,{fullWidth:m=!1}=e,{noGutter:d=!1}=e,{noGutterLeft:u=!1}=e,{noGutterRight:f=!1}=e,{padding:g=!1}=e;return o.$$set=y=>{e=q(q({},e),K(y)),n(11,i=F(e,a)),"as"in y&&n(0,l=y.as),"condensed"in y&&n(2,h=y.condensed),"narrow"in y&&n(3,c=y.narrow),"fullWidth"in y&&n(4,m=y.fullWidth),"noGutter"in y&&n(5,d=y.noGutter),"noGutterLeft"in y&&n(6,u=y.noGutterLeft),"noGutterRight"in y&&n(7,f=y.noGutterRight),"padding"in y&&n(8,g=y.padding),"$$scope"in y&&n(9,r=y.$$scope)},o.$$.update=()=>{n(1,t=ce(ie({},i),{class:[i.class,"bx--grid",h&&"bx--grid--condensed",c&&"bx--grid--narrow",m&&"bx--grid--full-width",d&&"bx--no-gutter",u&&"bx--no-gutter--left",f&&"bx--no-gutter--right",g&&"bx--row-padding"].filter(Boolean).join(" ")}))},[l,t,h,c,m,d,u,f,g,r,s]}class jn extends V{constructor(e){super(),z(this,e,Pn,Gn,J,{as:0,condensed:2,narrow:3,fullWidth:4,noGutter:5,noGutterLeft:6,noGutterRight:7,padding:8})}}var Qn=jn;const En=o=>({props:o&2}),Ge=o=>({props:o[1]});function Mn(o){let e,n;const t=o[14].default,a=H(t,o,o[13],null);let i=[o[1]],s={};for(let r=0;r<i.length;r+=1)s=q(s,i[r]);return{c(){e=Q("div"),a&&a.c(),this.h()},l(r){e=E(r,"DIV",{});var l=M(e);a&&a.l(l),l.forEach(v),this.h()},h(){R(e,s)},m(r,l){G(r,e,l),a&&a.m(e,null),n=!0},p(r,l){a&&a.p&&(!n||l&8192)&&U(a,t,r,r[13],n?B(t,r[13],l,null):Y(r[13]),null),R(e,s=te(i,[l&2&&r[1]]))},i(r){n||(b(a,r),n=!0)},o(r){_(a,r),n=!1},d(r){r&&v(e),a&&a.d(r)}}}function Nn(o){let e;const n=o[14].default,t=H(n,o,o[13],Ge);return{c(){t&&t.c()},l(a){t&&t.l(a)},m(a,i){t&&t.m(a,i),e=!0},p(a,i){t&&t.p&&(!e||i&8194)&&U(t,n,a,a[13],e?B(n,a[13],i,En):Y(a[13]),Ge)},i(a){e||(b(t,a),e=!0)},o(a){_(t,a),e=!1},d(a){t&&t.d(a)}}}function On(o){let e,n,t,a;const i=[Nn,Mn],s=[];function r(l,h){return l[0]?0:1}return e=r(o),n=s[e]=i[e](o),{c(){n.c(),t=D()},l(l){n.l(l),t=D()},m(l,h){s[e].m(l,h),G(l,t,h),a=!0},p(l,[h]){let c=e;e=r(l),e===c?s[e].p(l,h):(ee(),_(s[c],1,1,()=>{s[c]=null}),ne(),n=s[e],n?n.p(l,h):(n=s[e]=i[e](l),n.c()),b(n,1),n.m(t.parentNode,t))},i(l){a||(b(n),a=!0)},o(l){_(n),a=!1},d(l){s[e].d(l),l&&v(t)}}}function An(o,e,n){let t,a;const i=["as","noGutter","noGutterLeft","noGutterRight","padding","aspectRatio","sm","md","lg","xlg","max"];let s=F(e,i),{$$slots:r={},$$scope:l}=e,{as:h=!1}=e,{noGutter:c=!1}=e,{noGutterLeft:m=!1}=e,{noGutterRight:d=!1}=e,{padding:u=!1}=e,{aspectRatio:f=void 0}=e,{sm:g=void 0}=e,{md:y=void 0}=e,{lg:T=void 0}=e,{xlg:k=void 0}=e,{max:P=void 0}=e;const L=["sm","md","lg","xlg","max"];return o.$$set=p=>{e=q(q({},e),K(p)),n(16,s=F(e,i)),"as"in p&&n(0,h=p.as),"noGutter"in p&&n(2,c=p.noGutter),"noGutterLeft"in p&&n(3,m=p.noGutterLeft),"noGutterRight"in p&&n(4,d=p.noGutterRight),"padding"in p&&n(5,u=p.padding),"aspectRatio"in p&&n(6,f=p.aspectRatio),"sm"in p&&n(7,g=p.sm),"md"in p&&n(8,y=p.md),"lg"in p&&n(9,T=p.lg),"xlg"in p&&n(10,k=p.xlg),"max"in p&&n(11,P=p.max),"$$scope"in p&&n(13,l=p.$$scope)},o.$$.update=()=>{o.$$.dirty&3968&&n(12,t=[g,y,T,k,P].map((p,w)=>{const j=L[w];if(p===!0)return`bx--col-${j}`;if(typeof p=="number")return`bx--col-${j}-${p}`;if(typeof p=="object"){let W=[];return typeof p.span=="number"?W=[...W,`bx--col-${j}-${p.span}`]:p.span===!0&&(W=[...W,`bx--col-${j}`]),typeof p.offset=="number"&&(W=[...W,`bx--offset-${j}-${p.offset}`]),W.join(" ")}}).filter(Boolean).join(" ")),n(1,a=ce(ie({},s),{class:[s.class,t,!t&&"bx--col",c&&"bx--no-gutter",m&&"bx--no-gutter--left",d&&"bx--no-gutter--right",f&&`bx--aspect-ratio bx--aspect-ratio--${f}`,u&&"bx--col-padding"].filter(Boolean).join(" ")}))},[h,a,c,m,d,u,f,g,y,T,k,P,t,l,r]}class xn extends V{constructor(e){super(),z(this,e,An,On,J,{as:0,noGutter:2,noGutterLeft:3,noGutterRight:4,padding:5,aspectRatio:6,sm:7,md:8,lg:9,xlg:10,max:11})}}var Fn=xn;function Pe(o){let e,n;return{c(){e=de("title"),n=se(o[1])},l(t){e=me(t,"title",{});var a=M(e);n=re(a,o[1]),a.forEach(v)},m(t,a){G(t,e,a),N(e,n)},p(t,a){a&2&&ue(n,t[1])},d(t){t&&v(e)}}}function Rn(o){let e,n,t=o[1]&&Pe(o),a=[{xmlns:"http://www.w3.org/2000/svg"},{viewBox:"0 0 32 32"},{fill:"currentColor"},{preserveAspectRatio:"xMidYMid meet"},{width:o[0]},{height:o[0]},o[2],o[3]],i={};for(let s=0;s<a.length;s+=1)i=q(i,a[s]);return{c(){e=de("svg"),t&&t.c(),n=de("path"),this.h()},l(s){e=me(s,"svg",{xmlns:!0,viewBox:!0,fill:!0,preserveAspectRatio:!0,width:!0,height:!0});var r=M(e);t&&t.l(r),n=me(r,"path",{d:!0}),M(n).forEach(v),r.forEach(v),this.h()},h(){X(n,"d","M4 6H28V8H4zM4 24H28V26H4zM4 12H28V14H4zM4 18H28V20H4z"),Se(e,i)},m(s,r){G(s,e,r),t&&t.m(e,null),N(e,n)},p(s,[r]){s[1]?t?t.p(s,r):(t=Pe(s),t.c(),t.m(e,n)):t&&(t.d(1),t=null),Se(e,i=te(a,[{xmlns:"http://www.w3.org/2000/svg"},{viewBox:"0 0 32 32"},{fill:"currentColor"},{preserveAspectRatio:"xMidYMid meet"},r&1&&{width:s[0]},r&1&&{height:s[0]},r&4&&s[2],r&8&&s[3]]))},i:le,o:le,d(s){s&&v(e),t&&t.d()}}}function Cn(o,e,n){let t,a;const i=["size","title"];let s=F(e,i),{size:r=16}=e,{title:l=void 0}=e;return o.$$set=h=>{n(5,e=q(q({},e),K(h))),n(3,s=F(e,i)),"size"in h&&n(0,r=h.size),"title"in h&&n(1,l=h.title)},o.$$.update=()=>{n(4,t=e["aria-label"]||e["aria-labelledby"]||l),n(2,a={"aria-hidden":t?void 0:!0,role:t?"img":void 0,focusable:Number(e.tabindex)===0?!0:void 0})},e=K(e),[r,l,a,s,t]}class Dn extends V{constructor(e){super(),z(this,e,Cn,Rn,J,{size:0,title:1})}}var Ye=Dn;const fe=hn(!1);function Vn(o){let e,n,t,a,i;var s=o[0]?o[4]:o[3];function r(c){return{props:{size:20}}}s&&(n=new s(r()));let l=[{type:"button"},{title:o[2]},{"aria-label":o[2]},o[5]],h={};for(let c=0;c<l.length;c+=1)h=q(h,l[c]);return{c(){e=Q("button"),n&&O(n.$$.fragment),this.h()},l(c){e=E(c,"BUTTON",{type:!0,title:!0,"aria-label":!0});var m=M(e);n&&C(n.$$.fragment,m),m.forEach(v),this.h()},h(){R(e,h),S(e,"bx--header__action",!0),S(e,"bx--header__menu-trigger",!0),S(e,"bx--header__menu-toggle",!0)},m(c,m){G(c,e,m),n&&A(n,e,null),e.autofocus&&e.focus(),o[7](e),t=!0,a||(i=[ae(e,"click",o[6]),ae(e,"click",o[8])],a=!0)},p(c,[m]){if(s!==(s=c[0]?c[4]:c[3])){if(n){ee();const d=n;_(d.$$.fragment,1,0,()=>{x(d,1)}),ne()}s?(n=new s(r()),O(n.$$.fragment),b(n.$$.fragment,1),A(n,e,null)):n=null}R(e,h=te(l,[{type:"button"},(!t||m&4)&&{title:c[2]},(!t||m&4)&&{"aria-label":c[2]},m&32&&c[5]])),S(e,"bx--header__action",!0),S(e,"bx--header__menu-trigger",!0),S(e,"bx--header__menu-toggle",!0)},i(c){t||(n&&b(n.$$.fragment,c),t=!0)},o(c){n&&_(n.$$.fragment,c),t=!1},d(c){c&&v(e),n&&x(n),o[7](null),a=!1,ge(i)}}}function zn(o,e,n){const t=["ariaLabel","isOpen","iconMenu","iconClose","ref"];let a=F(e,t),{ariaLabel:i=void 0}=e,{isOpen:s=!1}=e,{iconMenu:r=Ye}=e,{iconClose:l=Ue}=e,{ref:h=null}=e;function c(u){pe.call(this,o,u)}function m(u){oe[u?"unshift":"push"](()=>{h=u,n(1,h)})}const d=()=>n(0,s=!s);return o.$$set=u=>{e=q(q({},e),K(u)),n(5,a=F(e,t)),"ariaLabel"in u&&n(2,i=u.ariaLabel),"isOpen"in u&&n(0,s=u.isOpen),"iconMenu"in u&&n(3,r=u.iconMenu),"iconClose"in u&&n(4,l=u.iconClose),"ref"in u&&n(1,h=u.ref)},[s,h,i,r,l,a,c,m,d]}class Jn extends V{constructor(e){super(),z(this,e,zn,Vn,J,{ariaLabel:2,isOpen:0,iconMenu:3,iconClose:4,ref:1})}}var Hn=Jn;const Un=o=>({}),je=o=>({}),Yn=o=>({}),Qe=o=>({});function Ee(o){let e,n,t;function a(s){o[19](s)}let i={iconClose:o[8],iconMenu:o[7]};return o[0]!==void 0&&(i.isOpen=o[0]),e=new Hn({props:i}),oe.push(()=>be(e,"isOpen",a)),{c(){O(e.$$.fragment)},l(s){C(e.$$.fragment,s)},m(s,r){A(e,s,r),t=!0},p(s,r){const l={};r&256&&(l.iconClose=s[8]),r&128&&(l.iconMenu=s[7]),!n&&r&1&&(n=!0,l.isOpen=s[0],ye(()=>n=!1)),e.$set(l)},i(s){t||(b(e.$$.fragment,s),t=!0)},o(s){_(e.$$.fragment,s),t=!1},d(s){x(e,s)}}}function Me(o){let e,n,t;return{c(){e=Q("span"),n=se(o[3]),t=se("\xA0"),this.h()},l(a){e=E(a,"SPAN",{});var i=M(e);n=re(i,o[3]),t=re(i,"\xA0"),i.forEach(v),this.h()},h(){S(e,"bx--header__name--prefix",!0)},m(a,i){G(a,e,i),N(e,n),N(e,t)},p(a,i){i&8&&ue(n,a[3])},d(a){a&&v(e)}}}function Bn(o){let e;return{c(){e=se(o[4])},l(n){e=re(n,o[4])},m(n,t){G(n,e,t)},p(n,t){t&16&&ue(e,n[4])},d(n){n&&v(e)}}}function Kn(o){let e,n,t,a,i,s,r,l,h;Je(o[18]);const c=o[16]["skip-to-content"],m=H(c,o,o[15],Qe);let d=(o[11]&&o[9]<o[6]||o[5])&&Ee(o),u=o[3]&&Me(o);const f=o[16].platform,g=H(f,o,o[15],je),y=g||Bn(o);let T=[{href:o[2]},o[12]],k={};for(let p=0;p<T.length;p+=1)k=q(k,T[p]);const P=o[16].default,L=H(P,o,o[15],null);return{c(){e=Q("header"),m&&m.c(),n=Z(),d&&d.c(),t=Z(),a=Q("a"),u&&u.c(),i=Z(),y&&y.c(),s=Z(),L&&L.c(),this.h()},l(p){e=E(p,"HEADER",{"aria-label":!0});var w=M(e);m&&m.l(w),n=$(w),d&&d.l(w),t=$(w),a=E(w,"A",{href:!0});var j=M(a);u&&u.l(j),i=$(j),y&&y.l(j),j.forEach(v),s=$(w),L&&L.l(w),w.forEach(v),this.h()},h(){R(a,k),S(a,"bx--header__name",!0),X(e,"aria-label",o[10]),S(e,"bx--header",!0)},m(p,w){G(p,e,w),m&&m.m(e,null),N(e,n),d&&d.m(e,null),N(e,t),N(e,a),u&&u.m(a,null),N(a,i),y&&y.m(a,null),o[20](a),N(e,s),L&&L.m(e,null),r=!0,l||(h=[ae(window,"resize",o[18]),ae(a,"click",o[17])],l=!0)},p(p,[w]){m&&m.p&&(!r||w&32768)&&U(m,c,p,p[15],r?B(c,p[15],w,Yn):Y(p[15]),Qe),p[11]&&p[9]<p[6]||p[5]?d?(d.p(p,w),w&2656&&b(d,1)):(d=Ee(p),d.c(),b(d,1),d.m(e,t)):d&&(ee(),_(d,1,1,()=>{d=null}),ne()),p[3]?u?u.p(p,w):(u=Me(p),u.c(),u.m(a,i)):u&&(u.d(1),u=null),g?g.p&&(!r||w&32768)&&U(g,f,p,p[15],r?B(f,p[15],w,Un):Y(p[15]),je):y&&y.p&&(!r||w&16)&&y.p(p,r?w:-1),R(a,k=te(T,[(!r||w&4)&&{href:p[2]},w&4096&&p[12]])),S(a,"bx--header__name",!0),L&&L.p&&(!r||w&32768)&&U(L,P,p,p[15],r?B(P,p[15],w,null):Y(p[15]),null),(!r||w&1024)&&X(e,"aria-label",p[10])},i(p){r||(b(m,p),b(d),b(y,p),b(L,p),r=!0)},o(p){_(m,p),_(d),_(y,p),_(L,p),r=!1},d(p){p&&v(e),m&&m.d(p),d&&d.d(),u&&u.d(),y&&y.d(p),o[20](null),L&&L.d(p),l=!1,ge(h)}}}function Wn(o,e,n){let t;const a=["expandedByDefault","isSideNavOpen","uiShellAriaLabel","href","company","platformName","persistentHamburgerMenu","expansionBreakpoint","ref","iconMenu","iconClose"];let i=F(e,a),s;He(o,fe,I=>n(11,s=I));let{$$slots:r={},$$scope:l}=e,{expandedByDefault:h=!0}=e,{isSideNavOpen:c=!1}=e,{uiShellAriaLabel:m=void 0}=e,{href:d=void 0}=e,{company:u=void 0}=e,{platformName:f=""}=e,{persistentHamburgerMenu:g=!1}=e,{expansionBreakpoint:y=1056}=e,{ref:T=null}=e,{iconMenu:k=Ye}=e,{iconClose:P=Ue}=e,L;function p(I){pe.call(this,o,I)}function w(){n(9,L=window.innerWidth)}function j(I){c=I,n(0,c),n(13,h),n(9,L),n(6,y),n(5,g)}function W(I){oe[I?"unshift":"push"](()=>{T=I,n(1,T)})}return o.$$set=I=>{n(21,e=q(q({},e),K(I))),n(12,i=F(e,a)),"expandedByDefault"in I&&n(13,h=I.expandedByDefault),"isSideNavOpen"in I&&n(0,c=I.isSideNavOpen),"uiShellAriaLabel"in I&&n(14,m=I.uiShellAriaLabel),"href"in I&&n(2,d=I.href),"company"in I&&n(3,u=I.company),"platformName"in I&&n(4,f=I.platformName),"persistentHamburgerMenu"in I&&n(5,g=I.persistentHamburgerMenu),"expansionBreakpoint"in I&&n(6,y=I.expansionBreakpoint),"ref"in I&&n(1,T=I.ref),"iconMenu"in I&&n(7,k=I.iconMenu),"iconClose"in I&&n(8,P=I.iconClose),"$$scope"in I&&n(15,l=I.$$scope)},o.$$.update=()=>{o.$$.dirty&8800&&n(0,c=h&&L>=y&&!g),n(10,t=u?`${u} `:""+(m||e["aria-label"]||f))},e=K(e),[c,T,d,u,f,g,y,k,P,L,t,s,i,h,m,l,r,p,w,j,W]}class Xn extends V{constructor(e){super(),z(this,e,Wn,Kn,J,{expandedByDefault:13,isSideNavOpen:0,uiShellAriaLabel:14,href:2,company:3,platformName:4,persistentHamburgerMenu:5,expansionBreakpoint:6,ref:1,iconMenu:7,iconClose:8})}}var Zn=Xn;const Be="https://raw.githubusercontent.com/magidoc-org/magidoc/main/logo/logo_horizontal.png",$n=he.APP_LOGO.vite.getOrDefault({VITE_MAGIDOC_GENERATE:"true",VITE_PAGES:"[{\"title\":\"Introduction\",\"content\":[{\"title\":\"Welcome\",\"content\":\"# Welcome\\n\\n---\\n\\nWelcome to **Magidoc**! Magidoc a is a free open source tool to build static documentation websites for GraphQL APIs. It aims to provide a vast variety of templates and plugins, giving you access to a large range of customization options to fit your needs.\\n\\n## Features\\n\\n- \u{1F3C1} **Simple** - Build your first website in a few minutes.\\n\\n- \u270F\uFE0F **Customizable** - Use pre-defined customizations or pick a template and make it your own.\\n\\n- \u{1F4E6} **Fully Typed** - Every plugin and template ships with TypeScript definitions out of the box.\\n\\n- \u{1F4DD} **Markdown Support** - Markdown is supported everywhere, from the custom pages you create to the [SDL comments](https://dgraph.io/docs/graphql/schema/documentation/).\\n\\n## Why Magidoc?\\n\\nIn the GraphQL world, there are online web IDEs to play with GraphQL schemas. Namely, tools like [GraphiQL](https://github.com/graphql/graphiql) are great for developers to play with your API. However, even though some documentation is available in these tools, it is not easily searchable, discoverability is difficult, and most of all, it lacks of a way to present concepts, workflows and examples.\\n\\nMagidoc helps you achieve this with minimal effort. Either choose between one of the provided base templates with limited customization options, or generate a starter project and customize it however you want using technologies you may (or may not \u{1F608}) already know, like [TypeScript](https://www.typescriptlang.org/), [Svelte](https://svelte.dev/) (using [Svelte-Kit](https://kit.svelte.dev/)), and many others.\\n\"},{\"title\":\"Get Started\",\"content\":\"# Get Started\\n\\n---\\n\\n## 1) Configuration file\\n\\nThe first thing to do is to create a Magidoc configuration file. Here is a minimal `magidoc.mjs` example.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  introspection: {\\n    type: 'url',\\n    url: 'https://graphiql-test.netlify.app/.netlify/functions/schema-demo',\\n  },\\n  website: {\\n    template: 'carbon-multi-page',\\n  },\\n}\\n```\\n\\nFor the full reference, see the dedicated [Magidoc Configuration](/cli/magidoc-configuration) page.\\n\\n## 2) Run Magidoc Generate\\n\\n```bash\\nnpx @magidoc/cli@latest generate\\n```\\n\\nFor more details on how to use the `generate` command, see the [related documentation](/cli/generate).\\n\\n## 3) That's it!\\n\\nThe built static website outputs in the `./docs` folder by default. To preview the website locally, run the following command.\\n\\n```bash\\nnpx @magidoc/cli@latest preview\\n```\\n\"}]},{\"title\":\"Cli\",\"content\":[{\"title\":\"Magidoc Configuration\",\"content\":\"# Magidoc configuration\\n\\n---\\n\\nThe website is customizable through different options defined in a `magidoc.mjs`. The `mjs` extension tells Node to load the javascript file as an [ES Module](https://nodejs.org/api/esm.html), allowing you to use the `import/export` syntax.\\n\\n## Introspection\\n\\nThe introspection query can be fetched from different locations based on the `type` property.\\n\\n### URL\\n\\nFetches the introspection schema from a live API endpoint using the introspection query.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * Mandatory url type\\n     */\\n    type: 'url',\\n\\n    /**\\n     * Your API URL.\\n     */\\n    url: 'https://your-graphql-api-url.com/graphql',\\n\\n    /**\\n     * The HTTP Method to use.\\n     *\\n     * @default 'POST'\\n     */\\n    method: 'POST',\\n\\n    /**\\n     * Some APIs do not follow the GraphQL.js standard, so the introspection may be invalid for your API.\\n     * If this happens, you can specify a different introspection query to use.\\n     */\\n    query: '<introspection-query>',\\n\\n    /**\\n     * Optional headers to provide in the request.\\n     */\\n    headers: {\\n      /**\\n       * Since we use configuration as code, you can perform\\n       * authentication in this file or use environment variables.\\n       */\\n      Authorization: 'Bearer xxx',\\n    },\\n  },\\n}\\n```\\n\\n### SDL\\n\\nParses GraphQL [SDL](https://www.apollographql.com/docs/apollo-server/schema/schema/#the-schema-definition-language) files into the introspection schema to generate the documentation. SDL files usually use the extension `.graphql` or `.graphqls`.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * SDL introspection type\\n     */\\n    type: 'sdl',\\n\\n    /**\\n     * A mandatory paths array where the schema files can be found.\\n     * Glob syntax is supported in case your schema is split into multiple files.\\n     */\\n    paths: ['schemas/**/*.graphqls'],\\n  },\\n}\\n```\\n\\n### File\\n\\nUses the introspection schema from a local JSON file rather than fetching from an endpoint.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * Mandatory file type\\n     */\\n    type: 'file',\\n\\n    /**\\n     * The location of the file. If you use a relative path here,\\n     * it will be relative to where the Magidoc CLI is launched.\\n     */\\n    location: '/a/path/to/schema.json',\\n  },\\n}\\n```\\n\\n### Raw\\n\\nProvides the JSON schema in a raw string.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * Mandatory raw type\\n     */\\n    type: 'raw',\\n\\n    /**\\n     * The raw content of the introspection result.\\n     */\\n    content: '{__schema: {}}',\\n  },\\n}\\n```\\n\\n## Website\\n\\nThe website object specifies different options for building the documentation website.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  introspection: {\\n    // ...\\n  },\\n  website: {\\n    /**\\n     * The template to use for the website.\\n     */\\n    template: 'carbon-multi-page',\\n\\n    /**\\n     * Optional template version to use.\\n     * Changing this may cause the build to fail depending on the\\n     * changes between the version of the cli and the template\\n     *\\n     * @default current CLI version\\n     */\\n    templateVersion: '<magidoc-version>',\\n\\n    /**\\n     * The optional output location for the built website.\\n     *\\n     * @default './docs'\\n     */\\n    output: './docs',\\n\\n    /**\\n     * Options to use for the website.\\n     * Some templates may not support all options.\\n     * Make sure you check the documentation of the chosen template.\\n     */\\n    options: {\\n      /**\\n       * Your application title.\\n       *\\n       * @default 'Magidoc'\\n       */\\n      appTitle: 'Magidoc',\\n\\n      /**\\n       * Your application logo. For now, only URLs are supported.\\n       *\\n       * @default (magidoc logo)\\n       */\\n      appLogo: 'https://website.com/logo.png',\\n\\n      /**\\n       * Your application's favicon. For now, only URLs are supported.\\n       *\\n       * @default (magidoc logo)\\n       */\\n      appFavicon: 'https://website.com/favicon.ico',\\n\\n      /**\\n       * The a root path where your website will be served from.\\n       * It is common to see docs websites hosted on a /docs path.\\n       * Example: https://your-website.com/docs\\n       *\\n       * If your website is served from the root path, leave this undefined.\\n       *\\n       * @default undefined\\n       */\\n      siteRoot: '/docs',\\n\\n      /**\\n       * Customizes the website meta tags in the header of the HTML pages.\\n       * Any meta tags with the following format are supported:\\n       *\\n       * <meta name={key} content={value} />\\n       *\\n       * A list of common tags can be found here: https://gist.github.com/whitingx/3840905\\n       *\\n       * @default (arbitrary title, description and image are generated from `appTitle` and `appLogo`)\\n       */\\n      siteMeta: {\\n        description: 'This is your website description',\\n        keywords: 'svelte,docs,magidoc,cool',\\n      },\\n\\n      /**\\n       * Customize pages and their content. Each of these pages will be presented before the graphQL documentation.\\n       * Use this to present your API urls, authentication flows, designs, concepts, or whatever you want.\\n       *\\n       * @default (A default Magidoc page)\\n       */\\n      pages: [\\n        {\\n          /**\\n           * Each page must have a title for the navbar.\\n           */\\n          title: 'First item',\\n\\n          /**\\n           * The content. Markdown is supported, but be careful with the indentation.\\n           * Javascript multi-line templates conserve the indentation you have in your strings, which will not output properly.\\n           * It is recommended to either get your markdown from files or use a library to un-indent your strings.\\n           *\\n           * @see: https://www.npmjs.com/package/dedent\\n           */\\n          content: `\\n            # Title\\n\\n            Your markdown here\\n          `,\\n        },\\n        {\\n          title: 'Second Item',\\n          /**\\n           * Content can also be an array of sub-pages.\\n           * Some templates may not support multi-level nesting.\\n           * Make sure to check out the documentation of your template.\\n           */\\n          content: [\\n            {\\n              title: 'Nested Item',\\n              content: `Same as before`,\\n            },\\n          ],\\n        },\\n      ],\\n\\n      /**\\n       * Optional query generation factory. See more details below\\n       *\\n       * @default {}\\n       */\\n      queryGenerationFactories: {\\n        'Int!': 420,\\n        String: 'abc',\\n      },\\n    },\\n  },\\n}\\n```\\n\\nThe list of available templates can be found on the [templates page](/templates/introduction).\\n\\n### queryGenerationFactories\\n\\nThe query generation factories are used to customize query parameters in the generated queries. This is useful in the event that your API contains custom scalars, or that you want to return custom values for a type.\\n\\nTo know more about the extent of what is possible with `queryGenerationFactories`, read the [query generator](/plugins/graphql-query-generator) documentation.\\n\\n:::notification type=\\\"warning\\\"\\nMagidoc CLI uses environment variables to pass options to the templates, which means that functions are not supported here, unlike when using the `graphql-query-generator` directly. If you wish to have more customization options of the output variables, you will need to use the [init command](/cli/init) and customize the template directly.\\n:::\\n\"},{\"title\":\"Generate\",\"content\":\"# Command - Generate\\n\\n---\\n\\nThe `generate command` builds a static website using the `magidoc.mjs` configuration file as input. Use the `--help` option to discover more about the optional parameters you can use.\\n\\n```bash\\nnpx @magidoc/cli@latest generate --help\\n```\\n\\nOnce your website is built successfully, the output can be previewed locally using the `preview` command. This command also uses the `magidoc.mjs` file.\\n\\n```bash\\nnpx @magidoc/cli@latest preview --help\\n```\\n\"},{\"title\":\"Init\",\"content\":\"# Command - Init\\n\\n---\\n\\nIn case the available customizations are not sufficient for your needs, it is possible to initialize a starter project using any of the [available templates](/templates/introduction) and customize it however you want.\\n\\n:::notification type=\\\"info\\\"\\nIf your customization needs are small and could be useful to other users, you are welcome to open an issue or contribute to add the customization to the template instead.\\n:::\\n\\n:::notification type=\\\"warning\\\"\\nIf you decide to go on with the init command, you will no longer benefit from the template updates of Magidoc. You will need to keep the plugins and libraries up to date by yourself.\\n:::\\n\\nTo see all the available options for the `init command`, run the following.\\n\\n```bash\\nnpx @magidoc/cli@latest init --help\\n```\\n\\nWhen initializing a template, you may choose one of the [Magidoc templates](/templates/introduction). You also have the option to choose a package manager. The recommended default package manager is [Pnpm](https://pnpm.io/workspaces).\\n\"}]},{\"title\":\"Templates\",\"content\":[{\"title\":\"Introduction\",\"content\":\"# Introduction\\n\\n---\\n\\nThis section contains a list of all the available templates to be used either with the [generate](/cli/generate) or [init](/cli/init) commands.\\n\\n- [carbon-multi-page](/templates/carbon-multi-page)\\n\"},{\"title\":\"Carbon-multi-page\",\"content\":\"# Template - Carbon Multi-Page\\n\\n:::tags\\nsvelte,svelte-kit\\n:::\\n\\n---\\n\\nThis starter uses IBM's [Carbon Design](https://carbondesignsystem.com/) in a multi-page documentation, meaning that each type, query and mutation gets its own dedicated page.\\n\\nSee the template's [readme](https://github.com/magidoc-org/magidoc/blob/main/packages/starters/carbon-multi-page/README.md) if you use the [init](/cli/init) command.\\n\\n## Demo\\n\\nSee the latest example of this template on [Netlify](https://magidoc-carbon-multi-page.netlify.app).\\n\\n## Supported options\\n\\nThe following options are supported and can be provided via the [magidoc.mjs](/cli/magidoc-configuration) config file.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  website: {\\n    template: 'carbon-multi-page',\\n    options: {\\n      appTitle: 'Magidoc',\\n      appLogo: 'https://some-website/my-image.png',\\n      appFavicon: 'https://website.com/favicon.ico',\\n      siteRoot: '/docs',\\n      siteMeta: {\\n        description: 'My carbon template',\\n      },\\n      pages: [\\n        {\\n          title: 'Content',\\n          // This template supports only a single level of nesting.\\n          // All sub-levels will be discarded.\\n          content: [\\n            {\\n              title: 'SubContent',\\n              content: 'Your markdown here.',\\n            },\\n          ],\\n        },\\n      ],\\n      queryGenerationFactories: {},\\n    },\\n  },\\n}\\n```\\n\"}]},{\"title\":\"Plugins\",\"content\":[{\"title\":\"Introduction\",\"content\":\"# Introduction\\n\\n---\\n\\nThis section contains plugins that can be used within any javascript application, wether they are built for NodeJS, Svelte or any other frontend framework. They are completely independent of the Magidoc ecosystem.\\n\\nEach of these plugins also include TypeScript definitions.\\n\"},{\"title\":\"GraphQL-Query-Generator\",\"content\":\"# GraphQL Query Generator\\n\\n:::tags\\nstandalone, plugin, node, browser\\n:::\\n\\n---\\n\\nThe GraphQL Query Generator plugin does exactly as its name suggests: it automatically builds GraphQL queries and variables from a root query type.\\n\\nGenerating GraphQL queries requires complex logic that is abstracted by this library. It supports parameter generation, duplicate names, union types and much more.\\n\\n## Example\\n\\nHere is a sample query generated by the plugin.\\n\\n**Query**\\n\\n```graphql\\nquery getPerson($delay: Int, $delay2: Int) {\\n  person {\\n    name\\n    age(delay: $delay)\\n    friends {\\n      name\\n      age(delay: $delay2)\\n    }\\n  }\\n}\\n```\\n\\n**Variables**\\n\\n```json\\n{\\n  \\\"delay\\\": 20,\\n  \\\"delay2\\\": 20\\n}\\n```\\n\\n## Install\\n\\nThis plugin requires [GraphQL.js](https://www.npmjs.com/package/graphql) as a peer dependency.\\n\\n```bash\\npnpm install -D @magidoc/plugin-query-generator graphql\\n```\\n\\n## Usage\\n\\nHere is a sample usage with TypeScript that would generate the [above query](#example).\\n\\n```typescript\\nimport generateGraphQLQuery, {\\n  NullGenerationStrategy,\\n  QueryType,\\n} from '@magidoc/plugin-query-generator'\\nimport { buildClientSchema, type IntrospectionQuery } from 'graphql'\\nimport schemaJson from '_schema.json'\\n\\n// Use GraphQL.js to build the schema\\nconst schema = buildClientSchema(schemaJson as unknown as IntrospectionQuery)\\nconst personField = schema.getQueryType()?.getFields()['person']!!\\n\\n// Generate a query for the `person` field\\nconst result = generateGraphQLQuery(personField, {\\n  queryName: 'getPerson',\\n  queryType: QueryType.QUERY,\\n  maxDepth: 3,\\n  nullGenerationStrategy: NullGenerationStrategy.NEVER_NULL,\\n  factories: {},\\n})\\n\\nconsole.log(result)\\n```\\n\\n## Factories\\n\\nFactories are the most important part of the configuration. It allows customization of how the plugin generates the random values used as [query variables](https://graphql.org/learn/queries/#variables). The plugin offers many [default factories](https://github.com/pelletier197/magidoc/blob/main/packages/plugins/query-generator/src/generator/defaultFactories.ts). Each of these factories can be overwritten and custom ones can be added.\\n\\nFactories can be used to provide custom generators for [scalar types](https://graphql.org/learn/schema/#scalar-types) and [input values](https://graphql.org/learn/schema/#input-types).\\n\\n### Custom scalar types\\n\\nMany GraphQL APIs implement [custom scalars](https://www.apollographql.com/docs/apollo-server/schema/custom-scalars/). Since the plugin cannot automatically determine what is backing these scalars, a custom factory is required for them.\\n\\nFor instance, given schema has a scalar named `OddNumber`, representing any odd number.\\n\\n```graphql\\nscalar OddNumber\\n```\\n\\nThe factory below could be provided.\\n\\n```typescript\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    OddNumber: () => 5,\\n  },\\n})\\n```\\n\\n### Factory key\\n\\nThe key for the GraphQL factory object uses glob syntax to determine which factory to use. The factories are used in order of specificity, from the most specific to the least specific. Only the most specific factory will be used to generate the value.\\n\\nHere are examples of factories going from the most specific to the least specific.\\n\\n```typescript\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    '[OddNumber!]!': () => [5],\\n    '[OddNumber!]': () => [7],\\n    'OddNumber!': () => 9,\\n    OddNumber: () => 11,\\n    '*Number': () => 13,\\n  },\\n})\\n```\\n\\n#### Type unwrapping\\n\\nThe query generator uses type unwrapping to try to find a factory in all the provided values. This means that you generally don't need to provide a factory for a `[OddNumber!]!`, because a factory `OddNumber` will be used for all possible wrappings of the type: `OddNumber`, `OddNumber!`, `[OddNumber!]` and `[OddNumber!]!`.\\n\\n### Factory context\\n\\nSome GraphQL types, like `String`, are used widely within most GraphQL APIs. You may desire to return a different value for these types based on the context where they are used. This can be achieved using the `context` parameter provided in the factory function.\\n\\n```typescript\\nimport generateGraphQLQuery, { type QueryType } from '@magidoc/plugin-query-generator'\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    String: (context: GraphQLFactoryContext) => {\\n      switch(context.targetName.toLowerCase()) {\\n        case: 'email':\\n          return 'some-email@mycompany.com'\\n        case: 'policyName'\\n          return 'Policy Name'\\n        default: context.defaultFactory ? context.defaultFactory.provide() : 'abc'\\n      }\\n    },\\n  },\\n})\\n```\\n\\nThe parameters found in the context object and their description are described below.\\n\\n<!-- prettier-ignore -->\\n| Parameter      | Description |\\n|----------------|-------------|\\n| targetName     | Either the argument name or the nested field name. |\\n| defaultValue   | The default value provided in the GraphQL Schema. You may decide to use it by providing a factory that returns the default value if it is non-null. |\\n| defaultFactory | The default factory that exists for this type. Can be useful if you want to perform custom actions and fallback to the default provider. Note that this factory is always the factory for a scalar value. Thus, if you create a factory for a `[String!]!`, then the default factory will return a String, not an array of strings. You will be required to return an array yourself. This property is only available when overriding the default generators. |\\n| randomFactory  | The random factory that would be used to generate this object. This can be useful to fallback on a random object. This is only available when generating input values. |\\n| depth          | The current depth in the field generation. This does not include the depth of the current parameter. |\\n| path           | Path in the query to the current parameter. |\\n\"},{\"title\":\"Rollup-Fetch-GraphQL-Schema\",\"content\":\"# Rollup fetch GraphQL Schema\\n\\n:::tags\\nstandalone, plugin, rollup, vite\\n:::\\n\\n---\\n\\nThis rollup plugin fetches the GraphQL Schema required by Magidoc Plugins to build your website documentation. It performs a full [GraphQL Introspection Query](https://graphql.org/learn/introspection/) and stores the result on the file-system. This approach keeps your documentation independent from the actual API.\\n\\n:::notification type=\\\"info\\\"\\nThis plugin is also compatible with [ViteJS](https://vitejs.dev/), which is used by SvelteKit.\\n:::\\n\\n## Install\\n\\nFirst, add the module to your project.\\n\\n```bash\\npnpm install -D @magidoc/rollup-plugin-fetch-gql-schema\\n```\\n\\nThen, add the plugin to your `Rollup/ViteJS` configuration. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nimport fetchGraphQLSchema from '@magidoc/rollup-plugin-fetch-gql-schema'\\n\\nexport default {\\n  kit: {\\n    vite: {\\n      plugins: [\\n        fetchGraphQLSchema({\\n          url: 'https://your-api-url.com',\\n        }),\\n      ],\\n    },\\n  },\\n}\\n```\\n\\n## Configuration\\n\\nConfigurations are available for the plugin to change the behavior of the introspection query. Here is the full configuration example and its default values.\\n\\n```javascript\\nfetchGraphQLSchema({\\n  /**\\n   * Your API URL.\\n   */\\n  url: 'https://your-graphql-api-url.com/graphql',\\n\\n  /**\\n   * The HTTP Method to use.\\n   *\\n   * @default 'POST'\\n   */\\n  method: 'POST',\\n\\n  /**\\n   * Some APIs do not follow the GraphQL.js standard, so the introspection may be invalid for your API.\\n   * If this happens, you can specify a different introspection query to use.\\n   */\\n  query: '<introspection-query>',\\n\\n  /**\\n   * Optional headers to provide in the request.\\n   *\\n   * @default {}\\n   */\\n  headers: {},\\n\\n  /**\\n   * The target path where to put the introspection query result.\\n   * This defaults to the src asset directory of SvelteKit, so that the asset can be imported directly.\\n   *\\n   * @default 'src/_schema.json'\\n   */\\n  target: 'src/_schema.json',\\n})\\n```\\n\"},{\"title\":\"Rollup-Parse-GraphQL-Schema\",\"content\":\"# Rollup parse GraphQL Schema\\n\\n:::tags\\nstandalone, plugin, rollup, vite\\n:::\\n\\n---\\n\\nSimilar to what the [Rollup Fetch Plugin](/plugins/rollup-fetch-graphql-schema) does, the Rollup Parse Plugin generates an introspection schema from your [SDL files](https://www.apollographql.com/docs/apollo-server/schema/schema/#the-schema-definition-language) and stores the result on the file-system. This approach is usually simpler than interacting with a live endpoint if your API uses Authentication.\\n\\n:::notification type=\\\"info\\\"\\nThis plugin is also compatible with [ViteJS](https://vitejs.dev/), which is used by SvelteKit.\\n:::\\n\\n## Install\\n\\nFirst, add the module to your project.\\n\\n```bash\\npnpm install -D @magidoc/rollup-plugin-parse-gql-schema\\n```\\n\\nThen, add the plugin to your `Rollup/ViteJS` configuration. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nimport parseGraphQLSchema from '@magidoc/rollup-plugin-parse-gql-schema'\\n\\nexport default {\\n  kit: {\\n    vite: {\\n      plugins: [\\n        parseGraphQLSchema({\\n          paths: ['schema/**/*.graphqls'],\\n        }),\\n      ],\\n    },\\n  },\\n}\\n```\\n\\n## Configuration\\n\\nSome configuration is available as well for the plugin.\\n\\n```javascript\\nparseGraphQLSchema({\\n  /**\\n   * A mandatory list of paths where to the SDL files are located. Glob syntax is supported.\\n   */\\n  paths: ['schema/**/*.graphqls'],\\n\\n  /**\\n   * The target path where to put the introspection result.\\n   * This defaults to the src asset directory of SvelteKit, so that the asset can be imported directly.\\n   *\\n   * @default 'src/_schema.json'\\n   */\\n  target: 'src/_schema.json',\\n})\\n```\\n\"}]},{\"title\":\"Svelte Plugins\",\"content\":[{\"title\":\"Introduction\",\"content\":\"# Introduction\\n\\n---\\n\\nThis section contains Svelte-specific plugins that can be used within any Svelte/SvelteKit applications. These plugins can also be used outside of the Magidoc ecosystem.\\n\\nEach of these plugins also include TypeScript definitions.\\n\"},{\"title\":\"PrismJS\",\"content\":\"# PrismJS\\n\\n:::tags\\nstandalone, plugin, svelte\\n:::\\n\\n---\\n\\nThe PrismJS plugin is a Svelte plugin built with TypeScript for displaying code inside the browser, using [PrismJS](https://www.npmjs.com/package/prismjs).\\n\\n## Install\\n\\nPrismJS is required as a peer dependency so you can use the themes and languages provided.\\n\\n```bash\\npnpm install -D @magidoc/plugin-svelte-prismjs prismjs @types/prismjs\\n```\\n\\nFor SvelteKit users, `prismjs` needs to be added to the `noExternal` dependencies. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nexport default {\\n  kit: {\\n    vite: {\\n      ssr: {\\n        noExternal: ['prismjs'],\\n      },\\n    },\\n  },\\n}\\n```\\n\\n## Usage\\n\\nThe plugin exposes attributes to provide the source and the language. Attributes to display line numbers and a copy button are also available.\\n\\n```svelte\\n<script lang=\\\"ts\\\">\\n  import Prism from '@magidoc/plugin-svelte-prismjs'\\n<\/script>\\n\\n<Prism\\n  language={'javascript'}\\n  source={`\\n    const x = 'best plugin ever'\\n    console.log(x)\\n  `}\\n  showLineNumbers\\n  showCopyButton\\n/>\\n```\\n\\n## Install languages\\n\\nPrismJS supports a [ton of languages](https://prismjs.com/#supported-languages) out of the box. You can use any of these languages simply by importing the syntax highlighting. Languages install themselves automatically, but PrismJS must be imported first.\\n\\n```svelte\\n<script lang=\\\"ts\\\">\\n  import Prism from '@magidoc/plugin-svelte-prismjs'\\n  import 'prismjs/components/prism-graphql'\\n  import 'prism-svelte' // https://github.com/pngwn/prism-svelte\\n<\/script>\\n```\\n\\n## Themes\\n\\nYou can modify Prism code sections style simply by importing a stylesheet. PrismJS provides many [themes](https://github.com/PrismJS/prism/tree/master/themes) out of the box that you can easily import. Otherwise, there is a wide variety of themes available on the web and even a [theme generator](https://k88hudson.github.io/syntax-highlighting-theme-generator/www/).\\n\\n```svelte\\n<script lang=\\\"ts\\\">\\n  import Prism from '@magidoc/plugin-svelte-prismjs'\\n  import 'prismjs/themes/prism-dark.css'\\n<\/script>\\n```\\n\\n:::notification type=\\\"info\\\"\\nThis website uses the PrismJS plugin to display code. If you like the theme used, it is a slightly modified version of the OneDark theme and is available [here](https://github.com/magidoc-org/magidoc/blob/main/packages/plugins/svelte-carbon-commons/src/lib/markdown/prism-theme.css).\\n:::\\n\"}]}]",VITE_SITE_ROOT:"/magidoc",VITE_SITE_META:'{"description":"Fast and highly customizable GraphQL documentation generator","og:description":"Fast and highly customizable GraphQL documentation generator","keywords":"Svelte,Svelte-Kit,PrismJS,GraphQL,Documentation,Static","author":"Magidoc-org","og:title":"Magidoc","og:type":"article","og:image":"https://raw.githubusercontent.com/magidoc-org/magidoc/main/logo/logo_full.png"}',VITE_APP_TITLE:"Magidoc",VITE_SVELTEKIT_APP_VERSION:"1653324200025",VITE_SVELTEKIT_APP_VERSION_FILE:"_app/version.json",VITE_SVELTEKIT_APP_VERSION_POLL_INTERVAL:"0",BASE_URL:"/magidoc/_app/",MODE:"production",DEV:!1,PROD:!0},Be);function et(o){let e,n,t=[{src:n=o[0]},{alt:"Magidoc"},o[1]],a={};for(let i=0;i<t.length;i+=1)a=q(a,t[i]);return{c(){e=Q("img"),this.h()},l(i){e=E(i,"IMG",{src:!0,alt:!0}),this.h()},h(){R(e,a)},m(i,s){G(i,e,s)},p(i,[s]){R(e,a=te(t,[{src:n},{alt:"Magidoc"},s&2&&i[1]]))},i:le,o:le,d(i){i&&v(e)}}}function nt(o,e,n){const t=he.APP_LOGO.vite.getOrDefault({VITE_MAGIDOC_GENERATE:"true",VITE_PAGES:"[{\"title\":\"Introduction\",\"content\":[{\"title\":\"Welcome\",\"content\":\"# Welcome\\n\\n---\\n\\nWelcome to **Magidoc**! Magidoc a is a free open source tool to build static documentation websites for GraphQL APIs. It aims to provide a vast variety of templates and plugins, giving you access to a large range of customization options to fit your needs.\\n\\n## Features\\n\\n- \u{1F3C1} **Simple** - Build your first website in a few minutes.\\n\\n- \u270F\uFE0F **Customizable** - Use pre-defined customizations or pick a template and make it your own.\\n\\n- \u{1F4E6} **Fully Typed** - Every plugin and template ships with TypeScript definitions out of the box.\\n\\n- \u{1F4DD} **Markdown Support** - Markdown is supported everywhere, from the custom pages you create to the [SDL comments](https://dgraph.io/docs/graphql/schema/documentation/).\\n\\n## Why Magidoc?\\n\\nIn the GraphQL world, there are online web IDEs to play with GraphQL schemas. Namely, tools like [GraphiQL](https://github.com/graphql/graphiql) are great for developers to play with your API. However, even though some documentation is available in these tools, it is not easily searchable, discoverability is difficult, and most of all, it lacks of a way to present concepts, workflows and examples.\\n\\nMagidoc helps you achieve this with minimal effort. Either choose between one of the provided base templates with limited customization options, or generate a starter project and customize it however you want using technologies you may (or may not \u{1F608}) already know, like [TypeScript](https://www.typescriptlang.org/), [Svelte](https://svelte.dev/) (using [Svelte-Kit](https://kit.svelte.dev/)), and many others.\\n\"},{\"title\":\"Get Started\",\"content\":\"# Get Started\\n\\n---\\n\\n## 1) Configuration file\\n\\nThe first thing to do is to create a Magidoc configuration file. Here is a minimal `magidoc.mjs` example.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  introspection: {\\n    type: 'url',\\n    url: 'https://graphiql-test.netlify.app/.netlify/functions/schema-demo',\\n  },\\n  website: {\\n    template: 'carbon-multi-page',\\n  },\\n}\\n```\\n\\nFor the full reference, see the dedicated [Magidoc Configuration](/cli/magidoc-configuration) page.\\n\\n## 2) Run Magidoc Generate\\n\\n```bash\\nnpx @magidoc/cli@latest generate\\n```\\n\\nFor more details on how to use the `generate` command, see the [related documentation](/cli/generate).\\n\\n## 3) That's it!\\n\\nThe built static website outputs in the `./docs` folder by default. To preview the website locally, run the following command.\\n\\n```bash\\nnpx @magidoc/cli@latest preview\\n```\\n\"}]},{\"title\":\"Cli\",\"content\":[{\"title\":\"Magidoc Configuration\",\"content\":\"# Magidoc configuration\\n\\n---\\n\\nThe website is customizable through different options defined in a `magidoc.mjs`. The `mjs` extension tells Node to load the javascript file as an [ES Module](https://nodejs.org/api/esm.html), allowing you to use the `import/export` syntax.\\n\\n## Introspection\\n\\nThe introspection query can be fetched from different locations based on the `type` property.\\n\\n### URL\\n\\nFetches the introspection schema from a live API endpoint using the introspection query.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * Mandatory url type\\n     */\\n    type: 'url',\\n\\n    /**\\n     * Your API URL.\\n     */\\n    url: 'https://your-graphql-api-url.com/graphql',\\n\\n    /**\\n     * The HTTP Method to use.\\n     *\\n     * @default 'POST'\\n     */\\n    method: 'POST',\\n\\n    /**\\n     * Some APIs do not follow the GraphQL.js standard, so the introspection may be invalid for your API.\\n     * If this happens, you can specify a different introspection query to use.\\n     */\\n    query: '<introspection-query>',\\n\\n    /**\\n     * Optional headers to provide in the request.\\n     */\\n    headers: {\\n      /**\\n       * Since we use configuration as code, you can perform\\n       * authentication in this file or use environment variables.\\n       */\\n      Authorization: 'Bearer xxx',\\n    },\\n  },\\n}\\n```\\n\\n### SDL\\n\\nParses GraphQL [SDL](https://www.apollographql.com/docs/apollo-server/schema/schema/#the-schema-definition-language) files into the introspection schema to generate the documentation. SDL files usually use the extension `.graphql` or `.graphqls`.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * SDL introspection type\\n     */\\n    type: 'sdl',\\n\\n    /**\\n     * A mandatory paths array where the schema files can be found.\\n     * Glob syntax is supported in case your schema is split into multiple files.\\n     */\\n    paths: ['schemas/**/*.graphqls'],\\n  },\\n}\\n```\\n\\n### File\\n\\nUses the introspection schema from a local JSON file rather than fetching from an endpoint.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * Mandatory file type\\n     */\\n    type: 'file',\\n\\n    /**\\n     * The location of the file. If you use a relative path here,\\n     * it will be relative to where the Magidoc CLI is launched.\\n     */\\n    location: '/a/path/to/schema.json',\\n  },\\n}\\n```\\n\\n### Raw\\n\\nProvides the JSON schema in a raw string.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * Mandatory raw type\\n     */\\n    type: 'raw',\\n\\n    /**\\n     * The raw content of the introspection result.\\n     */\\n    content: '{__schema: {}}',\\n  },\\n}\\n```\\n\\n## Website\\n\\nThe website object specifies different options for building the documentation website.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  introspection: {\\n    // ...\\n  },\\n  website: {\\n    /**\\n     * The template to use for the website.\\n     */\\n    template: 'carbon-multi-page',\\n\\n    /**\\n     * Optional template version to use.\\n     * Changing this may cause the build to fail depending on the\\n     * changes between the version of the cli and the template\\n     *\\n     * @default current CLI version\\n     */\\n    templateVersion: '<magidoc-version>',\\n\\n    /**\\n     * The optional output location for the built website.\\n     *\\n     * @default './docs'\\n     */\\n    output: './docs',\\n\\n    /**\\n     * Options to use for the website.\\n     * Some templates may not support all options.\\n     * Make sure you check the documentation of the chosen template.\\n     */\\n    options: {\\n      /**\\n       * Your application title.\\n       *\\n       * @default 'Magidoc'\\n       */\\n      appTitle: 'Magidoc',\\n\\n      /**\\n       * Your application logo. For now, only URLs are supported.\\n       *\\n       * @default (magidoc logo)\\n       */\\n      appLogo: 'https://website.com/logo.png',\\n\\n      /**\\n       * Your application's favicon. For now, only URLs are supported.\\n       *\\n       * @default (magidoc logo)\\n       */\\n      appFavicon: 'https://website.com/favicon.ico',\\n\\n      /**\\n       * The a root path where your website will be served from.\\n       * It is common to see docs websites hosted on a /docs path.\\n       * Example: https://your-website.com/docs\\n       *\\n       * If your website is served from the root path, leave this undefined.\\n       *\\n       * @default undefined\\n       */\\n      siteRoot: '/docs',\\n\\n      /**\\n       * Customizes the website meta tags in the header of the HTML pages.\\n       * Any meta tags with the following format are supported:\\n       *\\n       * <meta name={key} content={value} />\\n       *\\n       * A list of common tags can be found here: https://gist.github.com/whitingx/3840905\\n       *\\n       * @default (arbitrary title, description and image are generated from `appTitle` and `appLogo`)\\n       */\\n      siteMeta: {\\n        description: 'This is your website description',\\n        keywords: 'svelte,docs,magidoc,cool',\\n      },\\n\\n      /**\\n       * Customize pages and their content. Each of these pages will be presented before the graphQL documentation.\\n       * Use this to present your API urls, authentication flows, designs, concepts, or whatever you want.\\n       *\\n       * @default (A default Magidoc page)\\n       */\\n      pages: [\\n        {\\n          /**\\n           * Each page must have a title for the navbar.\\n           */\\n          title: 'First item',\\n\\n          /**\\n           * The content. Markdown is supported, but be careful with the indentation.\\n           * Javascript multi-line templates conserve the indentation you have in your strings, which will not output properly.\\n           * It is recommended to either get your markdown from files or use a library to un-indent your strings.\\n           *\\n           * @see: https://www.npmjs.com/package/dedent\\n           */\\n          content: `\\n            # Title\\n\\n            Your markdown here\\n          `,\\n        },\\n        {\\n          title: 'Second Item',\\n          /**\\n           * Content can also be an array of sub-pages.\\n           * Some templates may not support multi-level nesting.\\n           * Make sure to check out the documentation of your template.\\n           */\\n          content: [\\n            {\\n              title: 'Nested Item',\\n              content: `Same as before`,\\n            },\\n          ],\\n        },\\n      ],\\n\\n      /**\\n       * Optional query generation factory. See more details below\\n       *\\n       * @default {}\\n       */\\n      queryGenerationFactories: {\\n        'Int!': 420,\\n        String: 'abc',\\n      },\\n    },\\n  },\\n}\\n```\\n\\nThe list of available templates can be found on the [templates page](/templates/introduction).\\n\\n### queryGenerationFactories\\n\\nThe query generation factories are used to customize query parameters in the generated queries. This is useful in the event that your API contains custom scalars, or that you want to return custom values for a type.\\n\\nTo know more about the extent of what is possible with `queryGenerationFactories`, read the [query generator](/plugins/graphql-query-generator) documentation.\\n\\n:::notification type=\\\"warning\\\"\\nMagidoc CLI uses environment variables to pass options to the templates, which means that functions are not supported here, unlike when using the `graphql-query-generator` directly. If you wish to have more customization options of the output variables, you will need to use the [init command](/cli/init) and customize the template directly.\\n:::\\n\"},{\"title\":\"Generate\",\"content\":\"# Command - Generate\\n\\n---\\n\\nThe `generate command` builds a static website using the `magidoc.mjs` configuration file as input. Use the `--help` option to discover more about the optional parameters you can use.\\n\\n```bash\\nnpx @magidoc/cli@latest generate --help\\n```\\n\\nOnce your website is built successfully, the output can be previewed locally using the `preview` command. This command also uses the `magidoc.mjs` file.\\n\\n```bash\\nnpx @magidoc/cli@latest preview --help\\n```\\n\"},{\"title\":\"Init\",\"content\":\"# Command - Init\\n\\n---\\n\\nIn case the available customizations are not sufficient for your needs, it is possible to initialize a starter project using any of the [available templates](/templates/introduction) and customize it however you want.\\n\\n:::notification type=\\\"info\\\"\\nIf your customization needs are small and could be useful to other users, you are welcome to open an issue or contribute to add the customization to the template instead.\\n:::\\n\\n:::notification type=\\\"warning\\\"\\nIf you decide to go on with the init command, you will no longer benefit from the template updates of Magidoc. You will need to keep the plugins and libraries up to date by yourself.\\n:::\\n\\nTo see all the available options for the `init command`, run the following.\\n\\n```bash\\nnpx @magidoc/cli@latest init --help\\n```\\n\\nWhen initializing a template, you may choose one of the [Magidoc templates](/templates/introduction). You also have the option to choose a package manager. The recommended default package manager is [Pnpm](https://pnpm.io/workspaces).\\n\"}]},{\"title\":\"Templates\",\"content\":[{\"title\":\"Introduction\",\"content\":\"# Introduction\\n\\n---\\n\\nThis section contains a list of all the available templates to be used either with the [generate](/cli/generate) or [init](/cli/init) commands.\\n\\n- [carbon-multi-page](/templates/carbon-multi-page)\\n\"},{\"title\":\"Carbon-multi-page\",\"content\":\"# Template - Carbon Multi-Page\\n\\n:::tags\\nsvelte,svelte-kit\\n:::\\n\\n---\\n\\nThis starter uses IBM's [Carbon Design](https://carbondesignsystem.com/) in a multi-page documentation, meaning that each type, query and mutation gets its own dedicated page.\\n\\nSee the template's [readme](https://github.com/magidoc-org/magidoc/blob/main/packages/starters/carbon-multi-page/README.md) if you use the [init](/cli/init) command.\\n\\n## Demo\\n\\nSee the latest example of this template on [Netlify](https://magidoc-carbon-multi-page.netlify.app).\\n\\n## Supported options\\n\\nThe following options are supported and can be provided via the [magidoc.mjs](/cli/magidoc-configuration) config file.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  website: {\\n    template: 'carbon-multi-page',\\n    options: {\\n      appTitle: 'Magidoc',\\n      appLogo: 'https://some-website/my-image.png',\\n      appFavicon: 'https://website.com/favicon.ico',\\n      siteRoot: '/docs',\\n      siteMeta: {\\n        description: 'My carbon template',\\n      },\\n      pages: [\\n        {\\n          title: 'Content',\\n          // This template supports only a single level of nesting.\\n          // All sub-levels will be discarded.\\n          content: [\\n            {\\n              title: 'SubContent',\\n              content: 'Your markdown here.',\\n            },\\n          ],\\n        },\\n      ],\\n      queryGenerationFactories: {},\\n    },\\n  },\\n}\\n```\\n\"}]},{\"title\":\"Plugins\",\"content\":[{\"title\":\"Introduction\",\"content\":\"# Introduction\\n\\n---\\n\\nThis section contains plugins that can be used within any javascript application, wether they are built for NodeJS, Svelte or any other frontend framework. They are completely independent of the Magidoc ecosystem.\\n\\nEach of these plugins also include TypeScript definitions.\\n\"},{\"title\":\"GraphQL-Query-Generator\",\"content\":\"# GraphQL Query Generator\\n\\n:::tags\\nstandalone, plugin, node, browser\\n:::\\n\\n---\\n\\nThe GraphQL Query Generator plugin does exactly as its name suggests: it automatically builds GraphQL queries and variables from a root query type.\\n\\nGenerating GraphQL queries requires complex logic that is abstracted by this library. It supports parameter generation, duplicate names, union types and much more.\\n\\n## Example\\n\\nHere is a sample query generated by the plugin.\\n\\n**Query**\\n\\n```graphql\\nquery getPerson($delay: Int, $delay2: Int) {\\n  person {\\n    name\\n    age(delay: $delay)\\n    friends {\\n      name\\n      age(delay: $delay2)\\n    }\\n  }\\n}\\n```\\n\\n**Variables**\\n\\n```json\\n{\\n  \\\"delay\\\": 20,\\n  \\\"delay2\\\": 20\\n}\\n```\\n\\n## Install\\n\\nThis plugin requires [GraphQL.js](https://www.npmjs.com/package/graphql) as a peer dependency.\\n\\n```bash\\npnpm install -D @magidoc/plugin-query-generator graphql\\n```\\n\\n## Usage\\n\\nHere is a sample usage with TypeScript that would generate the [above query](#example).\\n\\n```typescript\\nimport generateGraphQLQuery, {\\n  NullGenerationStrategy,\\n  QueryType,\\n} from '@magidoc/plugin-query-generator'\\nimport { buildClientSchema, type IntrospectionQuery } from 'graphql'\\nimport schemaJson from '_schema.json'\\n\\n// Use GraphQL.js to build the schema\\nconst schema = buildClientSchema(schemaJson as unknown as IntrospectionQuery)\\nconst personField = schema.getQueryType()?.getFields()['person']!!\\n\\n// Generate a query for the `person` field\\nconst result = generateGraphQLQuery(personField, {\\n  queryName: 'getPerson',\\n  queryType: QueryType.QUERY,\\n  maxDepth: 3,\\n  nullGenerationStrategy: NullGenerationStrategy.NEVER_NULL,\\n  factories: {},\\n})\\n\\nconsole.log(result)\\n```\\n\\n## Factories\\n\\nFactories are the most important part of the configuration. It allows customization of how the plugin generates the random values used as [query variables](https://graphql.org/learn/queries/#variables). The plugin offers many [default factories](https://github.com/pelletier197/magidoc/blob/main/packages/plugins/query-generator/src/generator/defaultFactories.ts). Each of these factories can be overwritten and custom ones can be added.\\n\\nFactories can be used to provide custom generators for [scalar types](https://graphql.org/learn/schema/#scalar-types) and [input values](https://graphql.org/learn/schema/#input-types).\\n\\n### Custom scalar types\\n\\nMany GraphQL APIs implement [custom scalars](https://www.apollographql.com/docs/apollo-server/schema/custom-scalars/). Since the plugin cannot automatically determine what is backing these scalars, a custom factory is required for them.\\n\\nFor instance, given schema has a scalar named `OddNumber`, representing any odd number.\\n\\n```graphql\\nscalar OddNumber\\n```\\n\\nThe factory below could be provided.\\n\\n```typescript\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    OddNumber: () => 5,\\n  },\\n})\\n```\\n\\n### Factory key\\n\\nThe key for the GraphQL factory object uses glob syntax to determine which factory to use. The factories are used in order of specificity, from the most specific to the least specific. Only the most specific factory will be used to generate the value.\\n\\nHere are examples of factories going from the most specific to the least specific.\\n\\n```typescript\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    '[OddNumber!]!': () => [5],\\n    '[OddNumber!]': () => [7],\\n    'OddNumber!': () => 9,\\n    OddNumber: () => 11,\\n    '*Number': () => 13,\\n  },\\n})\\n```\\n\\n#### Type unwrapping\\n\\nThe query generator uses type unwrapping to try to find a factory in all the provided values. This means that you generally don't need to provide a factory for a `[OddNumber!]!`, because a factory `OddNumber` will be used for all possible wrappings of the type: `OddNumber`, `OddNumber!`, `[OddNumber!]` and `[OddNumber!]!`.\\n\\n### Factory context\\n\\nSome GraphQL types, like `String`, are used widely within most GraphQL APIs. You may desire to return a different value for these types based on the context where they are used. This can be achieved using the `context` parameter provided in the factory function.\\n\\n```typescript\\nimport generateGraphQLQuery, { type QueryType } from '@magidoc/plugin-query-generator'\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    String: (context: GraphQLFactoryContext) => {\\n      switch(context.targetName.toLowerCase()) {\\n        case: 'email':\\n          return 'some-email@mycompany.com'\\n        case: 'policyName'\\n          return 'Policy Name'\\n        default: context.defaultFactory ? context.defaultFactory.provide() : 'abc'\\n      }\\n    },\\n  },\\n})\\n```\\n\\nThe parameters found in the context object and their description are described below.\\n\\n<!-- prettier-ignore -->\\n| Parameter      | Description |\\n|----------------|-------------|\\n| targetName     | Either the argument name or the nested field name. |\\n| defaultValue   | The default value provided in the GraphQL Schema. You may decide to use it by providing a factory that returns the default value if it is non-null. |\\n| defaultFactory | The default factory that exists for this type. Can be useful if you want to perform custom actions and fallback to the default provider. Note that this factory is always the factory for a scalar value. Thus, if you create a factory for a `[String!]!`, then the default factory will return a String, not an array of strings. You will be required to return an array yourself. This property is only available when overriding the default generators. |\\n| randomFactory  | The random factory that would be used to generate this object. This can be useful to fallback on a random object. This is only available when generating input values. |\\n| depth          | The current depth in the field generation. This does not include the depth of the current parameter. |\\n| path           | Path in the query to the current parameter. |\\n\"},{\"title\":\"Rollup-Fetch-GraphQL-Schema\",\"content\":\"# Rollup fetch GraphQL Schema\\n\\n:::tags\\nstandalone, plugin, rollup, vite\\n:::\\n\\n---\\n\\nThis rollup plugin fetches the GraphQL Schema required by Magidoc Plugins to build your website documentation. It performs a full [GraphQL Introspection Query](https://graphql.org/learn/introspection/) and stores the result on the file-system. This approach keeps your documentation independent from the actual API.\\n\\n:::notification type=\\\"info\\\"\\nThis plugin is also compatible with [ViteJS](https://vitejs.dev/), which is used by SvelteKit.\\n:::\\n\\n## Install\\n\\nFirst, add the module to your project.\\n\\n```bash\\npnpm install -D @magidoc/rollup-plugin-fetch-gql-schema\\n```\\n\\nThen, add the plugin to your `Rollup/ViteJS` configuration. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nimport fetchGraphQLSchema from '@magidoc/rollup-plugin-fetch-gql-schema'\\n\\nexport default {\\n  kit: {\\n    vite: {\\n      plugins: [\\n        fetchGraphQLSchema({\\n          url: 'https://your-api-url.com',\\n        }),\\n      ],\\n    },\\n  },\\n}\\n```\\n\\n## Configuration\\n\\nConfigurations are available for the plugin to change the behavior of the introspection query. Here is the full configuration example and its default values.\\n\\n```javascript\\nfetchGraphQLSchema({\\n  /**\\n   * Your API URL.\\n   */\\n  url: 'https://your-graphql-api-url.com/graphql',\\n\\n  /**\\n   * The HTTP Method to use.\\n   *\\n   * @default 'POST'\\n   */\\n  method: 'POST',\\n\\n  /**\\n   * Some APIs do not follow the GraphQL.js standard, so the introspection may be invalid for your API.\\n   * If this happens, you can specify a different introspection query to use.\\n   */\\n  query: '<introspection-query>',\\n\\n  /**\\n   * Optional headers to provide in the request.\\n   *\\n   * @default {}\\n   */\\n  headers: {},\\n\\n  /**\\n   * The target path where to put the introspection query result.\\n   * This defaults to the src asset directory of SvelteKit, so that the asset can be imported directly.\\n   *\\n   * @default 'src/_schema.json'\\n   */\\n  target: 'src/_schema.json',\\n})\\n```\\n\"},{\"title\":\"Rollup-Parse-GraphQL-Schema\",\"content\":\"# Rollup parse GraphQL Schema\\n\\n:::tags\\nstandalone, plugin, rollup, vite\\n:::\\n\\n---\\n\\nSimilar to what the [Rollup Fetch Plugin](/plugins/rollup-fetch-graphql-schema) does, the Rollup Parse Plugin generates an introspection schema from your [SDL files](https://www.apollographql.com/docs/apollo-server/schema/schema/#the-schema-definition-language) and stores the result on the file-system. This approach is usually simpler than interacting with a live endpoint if your API uses Authentication.\\n\\n:::notification type=\\\"info\\\"\\nThis plugin is also compatible with [ViteJS](https://vitejs.dev/), which is used by SvelteKit.\\n:::\\n\\n## Install\\n\\nFirst, add the module to your project.\\n\\n```bash\\npnpm install -D @magidoc/rollup-plugin-parse-gql-schema\\n```\\n\\nThen, add the plugin to your `Rollup/ViteJS` configuration. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nimport parseGraphQLSchema from '@magidoc/rollup-plugin-parse-gql-schema'\\n\\nexport default {\\n  kit: {\\n    vite: {\\n      plugins: [\\n        parseGraphQLSchema({\\n          paths: ['schema/**/*.graphqls'],\\n        }),\\n      ],\\n    },\\n  },\\n}\\n```\\n\\n## Configuration\\n\\nSome configuration is available as well for the plugin.\\n\\n```javascript\\nparseGraphQLSchema({\\n  /**\\n   * A mandatory list of paths where to the SDL files are located. Glob syntax is supported.\\n   */\\n  paths: ['schema/**/*.graphqls'],\\n\\n  /**\\n   * The target path where to put the introspection result.\\n   * This defaults to the src asset directory of SvelteKit, so that the asset can be imported directly.\\n   *\\n   * @default 'src/_schema.json'\\n   */\\n  target: 'src/_schema.json',\\n})\\n```\\n\"}]},{\"title\":\"Svelte Plugins\",\"content\":[{\"title\":\"Introduction\",\"content\":\"# Introduction\\n\\n---\\n\\nThis section contains Svelte-specific plugins that can be used within any Svelte/SvelteKit applications. These plugins can also be used outside of the Magidoc ecosystem.\\n\\nEach of these plugins also include TypeScript definitions.\\n\"},{\"title\":\"PrismJS\",\"content\":\"# PrismJS\\n\\n:::tags\\nstandalone, plugin, svelte\\n:::\\n\\n---\\n\\nThe PrismJS plugin is a Svelte plugin built with TypeScript for displaying code inside the browser, using [PrismJS](https://www.npmjs.com/package/prismjs).\\n\\n## Install\\n\\nPrismJS is required as a peer dependency so you can use the themes and languages provided.\\n\\n```bash\\npnpm install -D @magidoc/plugin-svelte-prismjs prismjs @types/prismjs\\n```\\n\\nFor SvelteKit users, `prismjs` needs to be added to the `noExternal` dependencies. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nexport default {\\n  kit: {\\n    vite: {\\n      ssr: {\\n        noExternal: ['prismjs'],\\n      },\\n    },\\n  },\\n}\\n```\\n\\n## Usage\\n\\nThe plugin exposes attributes to provide the source and the language. Attributes to display line numbers and a copy button are also available.\\n\\n```svelte\\n<script lang=\\\"ts\\\">\\n  import Prism from '@magidoc/plugin-svelte-prismjs'\\n<\/script>\\n\\n<Prism\\n  language={'javascript'}\\n  source={`\\n    const x = 'best plugin ever'\\n    console.log(x)\\n  `}\\n  showLineNumbers\\n  showCopyButton\\n/>\\n```\\n\\n## Install languages\\n\\nPrismJS supports a [ton of languages](https://prismjs.com/#supported-languages) out of the box. You can use any of these languages simply by importing the syntax highlighting. Languages install themselves automatically, but PrismJS must be imported first.\\n\\n```svelte\\n<script lang=\\\"ts\\\">\\n  import Prism from '@magidoc/plugin-svelte-prismjs'\\n  import 'prismjs/components/prism-graphql'\\n  import 'prism-svelte' // https://github.com/pngwn/prism-svelte\\n<\/script>\\n```\\n\\n## Themes\\n\\nYou can modify Prism code sections style simply by importing a stylesheet. PrismJS provides many [themes](https://github.com/PrismJS/prism/tree/master/themes) out of the box that you can easily import. Otherwise, there is a wide variety of themes available on the web and even a [theme generator](https://k88hudson.github.io/syntax-highlighting-theme-generator/www/).\\n\\n```svelte\\n<script lang=\\\"ts\\\">\\n  import Prism from '@magidoc/plugin-svelte-prismjs'\\n  import 'prismjs/themes/prism-dark.css'\\n<\/script>\\n```\\n\\n:::notification type=\\\"info\\\"\\nThis website uses the PrismJS plugin to display code. If you like the theme used, it is a slightly modified version of the OneDark theme and is available [here](https://github.com/magidoc-org/magidoc/blob/main/packages/plugins/svelte-carbon-commons/src/lib/markdown/prism-theme.css).\\n:::\\n\"}]}]",VITE_SITE_ROOT:"/magidoc",VITE_SITE_META:'{"description":"Fast and highly customizable GraphQL documentation generator","og:description":"Fast and highly customizable GraphQL documentation generator","keywords":"Svelte,Svelte-Kit,PrismJS,GraphQL,Documentation,Static","author":"Magidoc-org","og:title":"Magidoc","og:type":"article","og:image":"https://raw.githubusercontent.com/magidoc-org/magidoc/main/logo/logo_full.png"}',VITE_APP_TITLE:"Magidoc",VITE_SVELTEKIT_APP_VERSION:"1653324200025",VITE_SVELTEKIT_APP_VERSION_FILE:"_app/version.json",VITE_SVELTEKIT_APP_VERSION_POLL_INTERVAL:"0",BASE_URL:"/magidoc/_app/",MODE:"production",DEV:!1,PROD:!0},Be);return o.$$set=a=>{n(1,e=q(q({},e),K(a)))},e=K(e),[t,e]}class tt extends V{constructor(e){super(),z(this,e,nt,et,J,{})}}function at(o){let e,n,t;return n=new tt({props:{class:"header-logo"}}),{c(){e=Q("div"),O(n.$$.fragment),this.h()},l(a){e=E(a,"DIV",{slot:!0,class:!0});var i=M(e);C(n.$$.fragment,i),i.forEach(v),this.h()},h(){X(e,"slot","platform"),X(e,"class","header-logo-wrapper svelte-1phxsbg")},m(a,i){G(a,e,i),A(n,e,null),t=!0},p:le,i(a){t||(b(n.$$.fragment,a),t=!0)},o(a){_(n.$$.fragment,a),t=!1},d(a){a&&v(e),x(n)}}}function ot(o){let e,n,t;function a(s){o[1](s)}let i={href:dn||"/",$$slots:{platform:[at]},$$scope:{ctx:o}};return o[0]!==void 0&&(i.isSideNavOpen=o[0]),e=new Zn({props:i}),oe.push(()=>be(e,"isSideNavOpen",a)),{c(){O(e.$$.fragment)},l(s){C(e.$$.fragment,s)},m(s,r){A(e,s,r),t=!0},p(s,[r]){const l={};r&4&&(l.$$scope={dirty:r,ctx:s}),!n&&r&1&&(n=!0,l.isSideNavOpen=s[0],ye(()=>n=!1)),e.$set(l)},i(s){t||(b(e.$$.fragment,s),t=!0)},o(s){_(e.$$.fragment,s),t=!1},d(s){x(e,s)}}}function it(o,e,n){let{isSideNavOpen:t=!0}=e;function a(i){t=i,n(0,t)}return o.$$set=i=>{"isSideNavOpen"in i&&n(0,t=i.isSideNavOpen)},[t,a]}class st extends V{constructor(e){super(),z(this,e,it,ot,J,{isSideNavOpen:0})}}function Ne(o){let e,n,t;return{c(){e=Q("div"),this.h()},l(a){e=E(a,"DIV",{}),M(e).forEach(v),this.h()},h(){S(e,"bx--side-nav__overlay",!0),S(e,"bx--side-nav__overlay-active",o[0])},m(a,i){G(a,e,i),n||(t=ae(e,"click",o[11]),n=!0)},p(a,i){i&1&&S(e,"bx--side-nav__overlay-active",a[0])},d(a){a&&v(e),n=!1,t()}}}function rt(o){let e,n,t,a,i,s;Je(o[10]);let r=!o[1]&&Ne(o);const l=o[9].default,h=H(l,o,o[8],null);let c=[{"aria-hidden":t=!o[0]},{"aria-label":o[3]},o[7]],m={};for(let d=0;d<c.length;d+=1)m=q(m,c[d]);return{c(){r&&r.c(),e=Z(),n=Q("nav"),h&&h.c(),this.h()},l(d){r&&r.l(d),e=$(d),n=E(d,"NAV",{"aria-hidden":!0,"aria-label":!0});var u=M(n);h&&h.l(u),u.forEach(v),this.h()},h(){R(n,m),S(n,"bx--side-nav__navigation",!0),S(n,"bx--side-nav",!0),S(n,"bx--side-nav--ux",!0),S(n,"bx--side-nav--expanded",o[2]&&o[5]>=o[4]?!1:o[0]),S(n,"bx--side-nav--collapsed",!o[0]&&!o[2]),S(n,"bx--side-nav--rail",o[2])},m(d,u){r&&r.m(d,u),G(d,e,u),G(d,n,u),h&&h.m(n,null),a=!0,i||(s=ae(window,"resize",o[10]),i=!0)},p(d,[u]){d[1]?r&&(r.d(1),r=null):r?r.p(d,u):(r=Ne(d),r.c(),r.m(e.parentNode,e)),h&&h.p&&(!a||u&256)&&U(h,l,d,d[8],a?B(l,d[8],u,null):Y(d[8]),null),R(n,m=te(c,[(!a||u&1&&t!==(t=!d[0]))&&{"aria-hidden":t},(!a||u&8)&&{"aria-label":d[3]},u&128&&d[7]])),S(n,"bx--side-nav__navigation",!0),S(n,"bx--side-nav",!0),S(n,"bx--side-nav--ux",!0),S(n,"bx--side-nav--expanded",d[2]&&d[5]>=d[4]?!1:d[0]),S(n,"bx--side-nav--collapsed",!d[0]&&!d[2]),S(n,"bx--side-nav--rail",d[2])},i(d){a||(b(h,d),a=!0)},o(d){_(h,d),a=!1},d(d){r&&r.d(d),d&&v(e),d&&v(n),h&&h.d(d),i=!1,s()}}}function lt(o,e,n){const t=["fixed","rail","ariaLabel","isOpen","expansionBreakpoint"];let a=F(e,t),{$$slots:i={},$$scope:s}=e,{fixed:r=!1}=e,{rail:l=!1}=e,{ariaLabel:h=void 0}=e,{isOpen:c=!1}=e,{expansionBreakpoint:m=1056}=e;const d=nn();let u;tn(()=>(fe.set(!0),()=>fe.set(!1)));function f(){n(5,u=window.innerWidth)}const g=()=>{d("click:overlay"),n(0,c=!1)};return o.$$set=y=>{e=q(q({},e),K(y)),n(7,a=F(e,t)),"fixed"in y&&n(1,r=y.fixed),"rail"in y&&n(2,l=y.rail),"ariaLabel"in y&&n(3,h=y.ariaLabel),"isOpen"in y&&n(0,c=y.isOpen),"expansionBreakpoint"in y&&n(4,m=y.expansionBreakpoint),"$$scope"in y&&n(8,s=y.$$scope)},o.$$.update=()=>{o.$$.dirty&1&&d(c?"open":"close")},[c,r,l,h,m,u,d,a,s,i,f,g]}class ut extends V{constructor(e){super(),z(this,e,lt,rt,J,{fixed:1,rail:2,ariaLabel:3,isOpen:0,expansionBreakpoint:4})}}var ct=ut;function pt(o){let e,n;const t=o[1].default,a=H(t,o,o[0],null);return{c(){e=Q("ul"),a&&a.c(),this.h()},l(i){e=E(i,"UL",{});var s=M(e);a&&a.l(s),s.forEach(v),this.h()},h(){S(e,"bx--side-nav__items",!0)},m(i,s){G(i,e,s),a&&a.m(e,null),n=!0},p(i,[s]){a&&a.p&&(!n||s&1)&&U(a,t,i,i[0],n?B(t,i[0],s,null):Y(i[0]),null)},i(i){n||(b(a,i),n=!0)},o(i){_(a,i),n=!1},d(i){i&&v(e),a&&a.d(i)}}}function ht(o,e,n){let{$$slots:t={},$$scope:a}=e;return o.$$set=i=>{"$$scope"in i&&n(0,a=i.$$scope)},[a,t]}class dt extends V{constructor(e){super(),z(this,e,ht,pt,J,{})}}var mt=dt;const ft=o=>({}),Oe=o=>({});function Ae(o){let e,n;const t=o[7].icon,a=H(t,o,o[6],Oe),i=a||gt(o);return{c(){e=Q("div"),i&&i.c(),this.h()},l(s){e=E(s,"DIV",{});var r=M(e);i&&i.l(r),r.forEach(v),this.h()},h(){S(e,"bx--side-nav__icon",!0)},m(s,r){G(s,e,r),i&&i.m(e,null),n=!0},p(s,r){a?a.p&&(!n||r&64)&&U(a,t,s,s[6],n?B(t,s[6],r,ft):Y(s[6]),Oe):i&&i.p&&(!n||r&8)&&i.p(s,n?r:-1)},i(s){n||(b(i,s),n=!0)},o(s){_(i,s),n=!1},d(s){s&&v(e),i&&i.d(s)}}}function gt(o){let e,n,t;var a=o[3];function i(s){return{}}return a&&(e=new a(i())),{c(){e&&O(e.$$.fragment),n=D()},l(s){e&&C(e.$$.fragment,s),n=D()},m(s,r){e&&A(e,s,r),G(s,n,r),t=!0},p(s,r){if(a!==(a=s[3])){if(e){ee();const l=e;_(l.$$.fragment,1,0,()=>{x(l,1)}),ne()}a?(e=new a(i()),O(e.$$.fragment),b(e.$$.fragment,1),A(e,n.parentNode,n)):e=null}},i(s){t||(e&&b(e.$$.fragment,s),t=!0)},o(s){e&&_(e.$$.fragment,s),t=!1},d(s){s&&v(n),e&&x(e,s)}}}function yt(o){let e,n,t,a,i,s,r,l,h,c,m,d,u,f=(o[5].icon||o[3])&&Ae(o);var g=Ie;function y(p){return{props:{title:"Open Menu",tabindex:"0"}}}g&&(l=new g(y()));let T=[{type:"button"},{"aria-expanded":o[0]},o[4]],k={};for(let p=0;p<T.length;p+=1)k=q(k,T[p]);const P=o[7].default,L=H(P,o,o[6],null);return{c(){e=Q("li"),n=Q("button"),f&&f.c(),t=Z(),a=Q("span"),i=se(o[2]),s=Z(),r=Q("div"),l&&O(l.$$.fragment),h=Z(),c=Q("ul"),L&&L.c(),this.h()},l(p){e=E(p,"LI",{});var w=M(e);n=E(w,"BUTTON",{type:!0,"aria-expanded":!0});var j=M(n);f&&f.l(j),t=$(j),a=E(j,"SPAN",{});var W=M(a);i=re(W,o[2]),W.forEach(v),s=$(j),r=E(j,"DIV",{});var I=M(r);l&&C(l.$$.fragment,I),I.forEach(v),j.forEach(v),h=$(w),c=E(w,"UL",{role:!0});var we=M(c);L&&L.l(we),we.forEach(v),w.forEach(v),this.h()},h(){S(a,"bx--side-nav__submenu-title",!0),S(r,"bx--side-nav__icon",!0),S(r,"bx--side-nav__icon--small",!0),S(r,"bx--side-nav__submenu-chevron",!0),R(n,k),S(n,"bx--side-nav__submenu",!0),X(c,"role","menu"),S(c,"bx--side-nav__menu",!0),S(e,"bx--side-nav__item",!0),S(e,"bx--side-nav__item--icon",o[3])},m(p,w){G(p,e,w),N(e,n),f&&f.m(n,null),N(n,t),N(n,a),N(a,i),N(n,s),N(n,r),l&&A(l,r,null),n.autofocus&&n.focus(),o[9](n),N(e,h),N(e,c),L&&L.m(c,null),m=!0,d||(u=[ae(n,"click",o[8]),ae(n,"click",o[10])],d=!0)},p(p,[w]){if(p[5].icon||p[3]?f?(f.p(p,w),w&40&&b(f,1)):(f=Ae(p),f.c(),b(f,1),f.m(n,t)):f&&(ee(),_(f,1,1,()=>{f=null}),ne()),(!m||w&4)&&ue(i,p[2]),g!==(g=Ie)){if(l){ee();const j=l;_(j.$$.fragment,1,0,()=>{x(j,1)}),ne()}g?(l=new g(y()),O(l.$$.fragment),b(l.$$.fragment,1),A(l,r,null)):l=null}R(n,k=te(T,[{type:"button"},(!m||w&1)&&{"aria-expanded":p[0]},w&16&&p[4]])),S(n,"bx--side-nav__submenu",!0),L&&L.p&&(!m||w&64)&&U(L,P,p,p[6],m?B(P,p[6],w,null):Y(p[6]),null),w&8&&S(e,"bx--side-nav__item--icon",p[3])},i(p){m||(b(f),l&&b(l.$$.fragment,p),b(L,p),m=!0)},o(p){_(f),l&&_(l.$$.fragment,p),_(L,p),m=!1},d(p){p&&v(e),f&&f.d(),l&&x(l),o[9](null),L&&L.d(p),d=!1,ge(u)}}}function bt(o,e,n){const t=["expanded","text","icon","ref"];let a=F(e,t),{$$slots:i={},$$scope:s}=e;const r=an(i);let{expanded:l=!1}=e,{text:h=void 0}=e,{icon:c=void 0}=e,{ref:m=null}=e;function d(g){pe.call(this,o,g)}function u(g){oe[g?"unshift":"push"](()=>{m=g,n(1,m)})}const f=()=>{n(0,l=!l)};return o.$$set=g=>{e=q(q({},e),K(g)),n(4,a=F(e,t)),"expanded"in g&&n(0,l=g.expanded),"text"in g&&n(2,h=g.text),"icon"in g&&n(3,c=g.icon),"ref"in g&&n(1,m=g.ref),"$$scope"in g&&n(6,s=g.$$scope)},[l,m,h,c,a,r,s,i,d,u,f]}class vt extends V{constructor(e){super(),z(this,e,bt,yt,J,{expanded:0,text:2,icon:3,ref:1})}}var wt=vt;function _t(o){let e;return{c(){e=se(o[3])},l(n){e=re(n,o[3])},m(n,t){G(n,e,t)},p(n,t){t&8&&ue(e,n[3])},d(n){n&&v(e)}}}function Tt(o){let e,n,t,a,i,s,r;const l=o[6].default,h=H(l,o,o[5],null),c=h||_t(o);let m=[{"aria-current":a=o[1]?"page":void 0},{href:o[2]},o[4]],d={};for(let u=0;u<m.length;u+=1)d=q(d,m[u]);return{c(){e=Q("li"),n=Q("a"),t=Q("span"),c&&c.c(),this.h()},l(u){e=E(u,"LI",{});var f=M(e);n=E(f,"A",{"aria-current":!0,href:!0});var g=M(n);t=E(g,"SPAN",{});var y=M(t);c&&c.l(y),y.forEach(v),g.forEach(v),f.forEach(v),this.h()},h(){S(t,"bx--side-nav__link-text",!0),R(n,d),S(n,"bx--side-nav__link",!0),S(e,"bx--side-nav__menu-item",!0)},m(u,f){G(u,e,f),N(e,n),N(n,t),c&&c.m(t,null),o[8](n),i=!0,s||(r=ae(n,"click",o[7]),s=!0)},p(u,[f]){h?h.p&&(!i||f&32)&&U(h,l,u,u[5],i?B(l,u[5],f,null):Y(u[5]),null):c&&c.p&&(!i||f&8)&&c.p(u,i?f:-1),R(n,d=te(m,[(!i||f&2&&a!==(a=u[1]?"page":void 0))&&{"aria-current":a},(!i||f&4)&&{href:u[2]},f&16&&u[4]])),S(n,"bx--side-nav__link",!0)},i(u){i||(b(c,u),i=!0)},o(u){_(c,u),i=!1},d(u){u&&v(e),c&&c.d(u),o[8](null),s=!1,r()}}}function St(o,e,n){const t=["isSelected","href","text","ref"];let a=F(e,t),{$$slots:i={},$$scope:s}=e,{isSelected:r=!1}=e,{href:l=void 0}=e,{text:h=void 0}=e,{ref:c=null}=e;function m(u){pe.call(this,o,u)}function d(u){oe[u?"unshift":"push"](()=>{c=u,n(0,c)})}return o.$$set=u=>{e=q(q({},e),K(u)),n(4,a=F(e,t)),"isSelected"in u&&n(1,r=u.isSelected),"href"in u&&n(2,l=u.href),"text"in u&&n(3,h=u.text),"ref"in u&&n(0,c=u.ref),"$$scope"in u&&n(5,s=u.$$scope)},[c,r,l,h,a,s,i,m,d]}class Lt extends V{constructor(e){super(),z(this,e,St,Tt,J,{isSelected:1,href:2,text:3,ref:0})}}var It=Lt;function qt(o){let e,n;const t=[{href:o[0]},{text:o[1]},{isSelected:o[2]===o[0]},o[3]];let a={};for(let i=0;i<t.length;i+=1)a=q(a,t[i]);return e=new It({props:a}),{c(){O(e.$$.fragment)},l(i){C(e.$$.fragment,i)},m(i,s){A(e,i,s),n=!0},p(i,[s]){const r=s&15?te(t,[s&1&&{href:i[0]},s&2&&{text:i[1]},s&5&&{isSelected:i[2]===i[0]},s&8&&on(i[3])]):{};e.$set(r)},i(i){n||(b(e.$$.fragment,i),n=!0)},o(i){_(e.$$.fragment,i),n=!1},d(i){x(e,i)}}}function kt(o,e,n){const t=["href","text","currentRef"];let a=F(e,t),{href:i}=e,{text:s}=e,{currentRef:r}=e;return o.$$set=l=>{e=q(q({},e),K(l)),n(3,a=F(e,t)),"href"in l&&n(0,i=l.href),"text"in l&&n(1,s=l.text),"currentRef"in l&&n(2,r=l.currentRef)},[i,s,r,a]}class Gt extends V{constructor(e){super(),z(this,e,kt,qt,J,{href:0,text:1,currentRef:2})}}const Pt=()=>{const o=sn("__svelte__");return{page:{subscribe:o.page.subscribe},navigating:{subscribe:o.navigating.subscribe},get preloading(){return console.error("stores.preloading is deprecated; use stores.navigating instead"),{subscribe:o.navigating.subscribe}},session:o.session,updated:o.updated}},jt={subscribe(o){return Pt().page.subscribe(o)}};function Qt(o){let e,n;return e=new Gt({props:{href:o[0].href,text:o[0].title,class:o[0].deprecated?"deprecated":"",currentRef:o[1].url.pathname}}),{c(){O(e.$$.fragment)},l(t){C(e.$$.fragment,t)},m(t,a){A(e,t,a),n=!0},p(t,[a]){const i={};a&1&&(i.href=t[0].href),a&1&&(i.text=t[0].title),a&1&&(i.class=t[0].deprecated?"deprecated":""),a&2&&(i.currentRef=t[1].url.pathname),e.$set(i)},i(t){n||(b(e.$$.fragment,t),n=!0)},o(t){_(e.$$.fragment,t),n=!1},d(t){x(e,t)}}}function Et(o,e,n){let t;He(o,jt,i=>n(1,t=i));let{item:a}=e;return o.$$set=i=>{"item"in i&&n(0,a=i.item)},[a,t]}class Ke extends V{constructor(e){super(),z(this,e,Et,Qt,J,{item:0})}}function xe(o,e,n){const t=o.slice();return t[2]=e[n],t}function Fe(o,e,n){const t=o.slice();return t[5]=e[n],t}function Mt(o){let e,n;return e=new wt({props:{text:o[2].title,expanded:!0,$$slots:{default:[Ot]},$$scope:{ctx:o}}}),{c(){O(e.$$.fragment)},l(t){C(e.$$.fragment,t)},m(t,a){A(e,t,a),n=!0},p(t,a){const i={};a&2&&(i.text=t[2].title),a&258&&(i.$$scope={dirty:a,ctx:t}),e.$set(i)},i(t){n||(b(e.$$.fragment,t),n=!0)},o(t){_(e.$$.fragment,t),n=!1},d(t){x(e,t)}}}function Nt(o){let e,n;return e=new Ke({props:{item:o[2]}}),{c(){O(e.$$.fragment)},l(t){C(e.$$.fragment,t)},m(t,a){A(e,t,a),n=!0},p(t,a){const i={};a&2&&(i.item=t[2]),e.$set(i)},i(t){n||(b(e.$$.fragment,t),n=!0)},o(t){_(e.$$.fragment,t),n=!1},d(t){x(e,t)}}}function Re(o){let e,n;return e=new Ke({props:{item:o[5]}}),{c(){O(e.$$.fragment)},l(t){C(e.$$.fragment,t)},m(t,a){A(e,t,a),n=!0},p(t,a){const i={};a&2&&(i.item=t[5]),e.$set(i)},i(t){n||(b(e.$$.fragment,t),n=!0)},o(t){_(e.$$.fragment,t),n=!1},d(t){x(e,t)}}}function Ce(o){let e,n,t=o[5].type==="page"&&Re(o);return{c(){t&&t.c(),e=D()},l(a){t&&t.l(a),e=D()},m(a,i){t&&t.m(a,i),G(a,e,i),n=!0},p(a,i){a[5].type==="page"?t?(t.p(a,i),i&2&&b(t,1)):(t=Re(a),t.c(),b(t,1),t.m(e.parentNode,e)):t&&(ee(),_(t,1,1,()=>{t=null}),ne())},i(a){n||(b(t),n=!0)},o(a){_(t),n=!1},d(a){t&&t.d(a),a&&v(e)}}}function Ot(o){let e,n,t=o[2].children,a=[];for(let s=0;s<t.length;s+=1)a[s]=Ce(Fe(o,t,s));const i=s=>_(a[s],1,1,()=>{a[s]=null});return{c(){for(let s=0;s<a.length;s+=1)a[s].c();e=Z()},l(s){for(let r=0;r<a.length;r+=1)a[r].l(s);e=$(s)},m(s,r){for(let l=0;l<a.length;l+=1)a[l].m(s,r);G(s,e,r),n=!0},p(s,r){if(r&2){t=s[2].children;let l;for(l=0;l<t.length;l+=1){const h=Fe(s,t,l);a[l]?(a[l].p(h,r),b(a[l],1)):(a[l]=Ce(h),a[l].c(),b(a[l],1),a[l].m(e.parentNode,e))}for(ee(),l=t.length;l<a.length;l+=1)i(l);ne()}},i(s){if(!n){for(let r=0;r<t.length;r+=1)b(a[r]);n=!0}},o(s){a=a.filter(Boolean);for(let r=0;r<a.length;r+=1)_(a[r]);n=!1},d(s){ve(a,s),s&&v(e)}}}function De(o){let e,n,t,a;const i=[Nt,Mt],s=[];function r(l,h){return l[2].type==="page"?0:1}return e=r(o),n=s[e]=i[e](o),{c(){n.c(),t=D()},l(l){n.l(l),t=D()},m(l,h){s[e].m(l,h),G(l,t,h),a=!0},p(l,h){let c=e;e=r(l),e===c?s[e].p(l,h):(ee(),_(s[c],1,1,()=>{s[c]=null}),ne(),n=s[e],n?n.p(l,h):(n=s[e]=i[e](l),n.c()),b(n,1),n.m(t.parentNode,t))},i(l){a||(b(n),a=!0)},o(l){_(n),a=!1},d(l){s[e].d(l),l&&v(t)}}}function At(o){let e,n,t=o[1],a=[];for(let s=0;s<t.length;s+=1)a[s]=De(xe(o,t,s));const i=s=>_(a[s],1,1,()=>{a[s]=null});return{c(){for(let s=0;s<a.length;s+=1)a[s].c();e=D()},l(s){for(let r=0;r<a.length;r+=1)a[r].l(s);e=D()},m(s,r){for(let l=0;l<a.length;l+=1)a[l].m(s,r);G(s,e,r),n=!0},p(s,r){if(r&2){t=s[1];let l;for(l=0;l<t.length;l+=1){const h=xe(s,t,l);a[l]?(a[l].p(h,r),b(a[l],1)):(a[l]=De(h),a[l].c(),b(a[l],1),a[l].m(e.parentNode,e))}for(ee(),l=t.length;l<a.length;l+=1)i(l);ne()}},i(s){if(!n){for(let r=0;r<t.length;r+=1)b(a[r]);n=!0}},o(s){a=a.filter(Boolean);for(let r=0;r<a.length;r+=1)_(a[r]);n=!1},d(s){ve(a,s),s&&v(e)}}}function xt(o){let e,n;return e=new mt({props:{$$slots:{default:[At]},$$scope:{ctx:o}}}),{c(){O(e.$$.fragment)},l(t){C(e.$$.fragment,t)},m(t,a){A(e,t,a),n=!0},p(t,a){const i={};a&258&&(i.$$scope={dirty:a,ctx:t}),e.$set(i)},i(t){n||(b(e.$$.fragment,t),n=!0)},o(t){_(e.$$.fragment,t),n=!1},d(t){x(e,t)}}}function Ft(o){let e,n;return e=new ct({props:{isOpen:o[0],$$slots:{default:[xt]},$$scope:{ctx:o}}}),{c(){O(e.$$.fragment)},l(t){C(e.$$.fragment,t)},m(t,a){A(e,t,a),n=!0},p(t,[a]){const i={};a&1&&(i.isOpen=t[0]),a&258&&(i.$$scope={dirty:a,ctx:t}),e.$set(i)},i(t){n||(b(e.$$.fragment,t),n=!0)},o(t){_(e.$$.fragment,t),n=!1},d(t){x(e,t)}}}function Rt(o,e,n){let{isOpen:t=!0}=e,{content:a}=e;return o.$$set=i=>{"isOpen"in i&&n(0,t=i.isOpen),"content"in i&&n(1,a=i.content)},[t,a]}class Ct extends V{constructor(e){super(),z(this,e,Rt,Ft,J,{isOpen:0,content:1})}}const Dt=Vt({appTitle:ln,appIcon:$n},he.SITE_META.vite.get({VITE_MAGIDOC_GENERATE:"true",VITE_PAGES:"[{\"title\":\"Introduction\",\"content\":[{\"title\":\"Welcome\",\"content\":\"# Welcome\\n\\n---\\n\\nWelcome to **Magidoc**! Magidoc a is a free open source tool to build static documentation websites for GraphQL APIs. It aims to provide a vast variety of templates and plugins, giving you access to a large range of customization options to fit your needs.\\n\\n## Features\\n\\n- \u{1F3C1} **Simple** - Build your first website in a few minutes.\\n\\n- \u270F\uFE0F **Customizable** - Use pre-defined customizations or pick a template and make it your own.\\n\\n- \u{1F4E6} **Fully Typed** - Every plugin and template ships with TypeScript definitions out of the box.\\n\\n- \u{1F4DD} **Markdown Support** - Markdown is supported everywhere, from the custom pages you create to the [SDL comments](https://dgraph.io/docs/graphql/schema/documentation/).\\n\\n## Why Magidoc?\\n\\nIn the GraphQL world, there are online web IDEs to play with GraphQL schemas. Namely, tools like [GraphiQL](https://github.com/graphql/graphiql) are great for developers to play with your API. However, even though some documentation is available in these tools, it is not easily searchable, discoverability is difficult, and most of all, it lacks of a way to present concepts, workflows and examples.\\n\\nMagidoc helps you achieve this with minimal effort. Either choose between one of the provided base templates with limited customization options, or generate a starter project and customize it however you want using technologies you may (or may not \u{1F608}) already know, like [TypeScript](https://www.typescriptlang.org/), [Svelte](https://svelte.dev/) (using [Svelte-Kit](https://kit.svelte.dev/)), and many others.\\n\"},{\"title\":\"Get Started\",\"content\":\"# Get Started\\n\\n---\\n\\n## 1) Configuration file\\n\\nThe first thing to do is to create a Magidoc configuration file. Here is a minimal `magidoc.mjs` example.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  introspection: {\\n    type: 'url',\\n    url: 'https://graphiql-test.netlify.app/.netlify/functions/schema-demo',\\n  },\\n  website: {\\n    template: 'carbon-multi-page',\\n  },\\n}\\n```\\n\\nFor the full reference, see the dedicated [Magidoc Configuration](/cli/magidoc-configuration) page.\\n\\n## 2) Run Magidoc Generate\\n\\n```bash\\nnpx @magidoc/cli@latest generate\\n```\\n\\nFor more details on how to use the `generate` command, see the [related documentation](/cli/generate).\\n\\n## 3) That's it!\\n\\nThe built static website outputs in the `./docs` folder by default. To preview the website locally, run the following command.\\n\\n```bash\\nnpx @magidoc/cli@latest preview\\n```\\n\"}]},{\"title\":\"Cli\",\"content\":[{\"title\":\"Magidoc Configuration\",\"content\":\"# Magidoc configuration\\n\\n---\\n\\nThe website is customizable through different options defined in a `magidoc.mjs`. The `mjs` extension tells Node to load the javascript file as an [ES Module](https://nodejs.org/api/esm.html), allowing you to use the `import/export` syntax.\\n\\n## Introspection\\n\\nThe introspection query can be fetched from different locations based on the `type` property.\\n\\n### URL\\n\\nFetches the introspection schema from a live API endpoint using the introspection query.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * Mandatory url type\\n     */\\n    type: 'url',\\n\\n    /**\\n     * Your API URL.\\n     */\\n    url: 'https://your-graphql-api-url.com/graphql',\\n\\n    /**\\n     * The HTTP Method to use.\\n     *\\n     * @default 'POST'\\n     */\\n    method: 'POST',\\n\\n    /**\\n     * Some APIs do not follow the GraphQL.js standard, so the introspection may be invalid for your API.\\n     * If this happens, you can specify a different introspection query to use.\\n     */\\n    query: '<introspection-query>',\\n\\n    /**\\n     * Optional headers to provide in the request.\\n     */\\n    headers: {\\n      /**\\n       * Since we use configuration as code, you can perform\\n       * authentication in this file or use environment variables.\\n       */\\n      Authorization: 'Bearer xxx',\\n    },\\n  },\\n}\\n```\\n\\n### SDL\\n\\nParses GraphQL [SDL](https://www.apollographql.com/docs/apollo-server/schema/schema/#the-schema-definition-language) files into the introspection schema to generate the documentation. SDL files usually use the extension `.graphql` or `.graphqls`.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * SDL introspection type\\n     */\\n    type: 'sdl',\\n\\n    /**\\n     * A mandatory paths array where the schema files can be found.\\n     * Glob syntax is supported in case your schema is split into multiple files.\\n     */\\n    paths: ['schemas/**/*.graphqls'],\\n  },\\n}\\n```\\n\\n### File\\n\\nUses the introspection schema from a local JSON file rather than fetching from an endpoint.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * Mandatory file type\\n     */\\n    type: 'file',\\n\\n    /**\\n     * The location of the file. If you use a relative path here,\\n     * it will be relative to where the Magidoc CLI is launched.\\n     */\\n    location: '/a/path/to/schema.json',\\n  },\\n}\\n```\\n\\n### Raw\\n\\nProvides the JSON schema in a raw string.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * Mandatory raw type\\n     */\\n    type: 'raw',\\n\\n    /**\\n     * The raw content of the introspection result.\\n     */\\n    content: '{__schema: {}}',\\n  },\\n}\\n```\\n\\n## Website\\n\\nThe website object specifies different options for building the documentation website.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  introspection: {\\n    // ...\\n  },\\n  website: {\\n    /**\\n     * The template to use for the website.\\n     */\\n    template: 'carbon-multi-page',\\n\\n    /**\\n     * Optional template version to use.\\n     * Changing this may cause the build to fail depending on the\\n     * changes between the version of the cli and the template\\n     *\\n     * @default current CLI version\\n     */\\n    templateVersion: '<magidoc-version>',\\n\\n    /**\\n     * The optional output location for the built website.\\n     *\\n     * @default './docs'\\n     */\\n    output: './docs',\\n\\n    /**\\n     * Options to use for the website.\\n     * Some templates may not support all options.\\n     * Make sure you check the documentation of the chosen template.\\n     */\\n    options: {\\n      /**\\n       * Your application title.\\n       *\\n       * @default 'Magidoc'\\n       */\\n      appTitle: 'Magidoc',\\n\\n      /**\\n       * Your application logo. For now, only URLs are supported.\\n       *\\n       * @default (magidoc logo)\\n       */\\n      appLogo: 'https://website.com/logo.png',\\n\\n      /**\\n       * Your application's favicon. For now, only URLs are supported.\\n       *\\n       * @default (magidoc logo)\\n       */\\n      appFavicon: 'https://website.com/favicon.ico',\\n\\n      /**\\n       * The a root path where your website will be served from.\\n       * It is common to see docs websites hosted on a /docs path.\\n       * Example: https://your-website.com/docs\\n       *\\n       * If your website is served from the root path, leave this undefined.\\n       *\\n       * @default undefined\\n       */\\n      siteRoot: '/docs',\\n\\n      /**\\n       * Customizes the website meta tags in the header of the HTML pages.\\n       * Any meta tags with the following format are supported:\\n       *\\n       * <meta name={key} content={value} />\\n       *\\n       * A list of common tags can be found here: https://gist.github.com/whitingx/3840905\\n       *\\n       * @default (arbitrary title, description and image are generated from `appTitle` and `appLogo`)\\n       */\\n      siteMeta: {\\n        description: 'This is your website description',\\n        keywords: 'svelte,docs,magidoc,cool',\\n      },\\n\\n      /**\\n       * Customize pages and their content. Each of these pages will be presented before the graphQL documentation.\\n       * Use this to present your API urls, authentication flows, designs, concepts, or whatever you want.\\n       *\\n       * @default (A default Magidoc page)\\n       */\\n      pages: [\\n        {\\n          /**\\n           * Each page must have a title for the navbar.\\n           */\\n          title: 'First item',\\n\\n          /**\\n           * The content. Markdown is supported, but be careful with the indentation.\\n           * Javascript multi-line templates conserve the indentation you have in your strings, which will not output properly.\\n           * It is recommended to either get your markdown from files or use a library to un-indent your strings.\\n           *\\n           * @see: https://www.npmjs.com/package/dedent\\n           */\\n          content: `\\n            # Title\\n\\n            Your markdown here\\n          `,\\n        },\\n        {\\n          title: 'Second Item',\\n          /**\\n           * Content can also be an array of sub-pages.\\n           * Some templates may not support multi-level nesting.\\n           * Make sure to check out the documentation of your template.\\n           */\\n          content: [\\n            {\\n              title: 'Nested Item',\\n              content: `Same as before`,\\n            },\\n          ],\\n        },\\n      ],\\n\\n      /**\\n       * Optional query generation factory. See more details below\\n       *\\n       * @default {}\\n       */\\n      queryGenerationFactories: {\\n        'Int!': 420,\\n        String: 'abc',\\n      },\\n    },\\n  },\\n}\\n```\\n\\nThe list of available templates can be found on the [templates page](/templates/introduction).\\n\\n### queryGenerationFactories\\n\\nThe query generation factories are used to customize query parameters in the generated queries. This is useful in the event that your API contains custom scalars, or that you want to return custom values for a type.\\n\\nTo know more about the extent of what is possible with `queryGenerationFactories`, read the [query generator](/plugins/graphql-query-generator) documentation.\\n\\n:::notification type=\\\"warning\\\"\\nMagidoc CLI uses environment variables to pass options to the templates, which means that functions are not supported here, unlike when using the `graphql-query-generator` directly. If you wish to have more customization options of the output variables, you will need to use the [init command](/cli/init) and customize the template directly.\\n:::\\n\"},{\"title\":\"Generate\",\"content\":\"# Command - Generate\\n\\n---\\n\\nThe `generate command` builds a static website using the `magidoc.mjs` configuration file as input. Use the `--help` option to discover more about the optional parameters you can use.\\n\\n```bash\\nnpx @magidoc/cli@latest generate --help\\n```\\n\\nOnce your website is built successfully, the output can be previewed locally using the `preview` command. This command also uses the `magidoc.mjs` file.\\n\\n```bash\\nnpx @magidoc/cli@latest preview --help\\n```\\n\"},{\"title\":\"Init\",\"content\":\"# Command - Init\\n\\n---\\n\\nIn case the available customizations are not sufficient for your needs, it is possible to initialize a starter project using any of the [available templates](/templates/introduction) and customize it however you want.\\n\\n:::notification type=\\\"info\\\"\\nIf your customization needs are small and could be useful to other users, you are welcome to open an issue or contribute to add the customization to the template instead.\\n:::\\n\\n:::notification type=\\\"warning\\\"\\nIf you decide to go on with the init command, you will no longer benefit from the template updates of Magidoc. You will need to keep the plugins and libraries up to date by yourself.\\n:::\\n\\nTo see all the available options for the `init command`, run the following.\\n\\n```bash\\nnpx @magidoc/cli@latest init --help\\n```\\n\\nWhen initializing a template, you may choose one of the [Magidoc templates](/templates/introduction). You also have the option to choose a package manager. The recommended default package manager is [Pnpm](https://pnpm.io/workspaces).\\n\"}]},{\"title\":\"Templates\",\"content\":[{\"title\":\"Introduction\",\"content\":\"# Introduction\\n\\n---\\n\\nThis section contains a list of all the available templates to be used either with the [generate](/cli/generate) or [init](/cli/init) commands.\\n\\n- [carbon-multi-page](/templates/carbon-multi-page)\\n\"},{\"title\":\"Carbon-multi-page\",\"content\":\"# Template - Carbon Multi-Page\\n\\n:::tags\\nsvelte,svelte-kit\\n:::\\n\\n---\\n\\nThis starter uses IBM's [Carbon Design](https://carbondesignsystem.com/) in a multi-page documentation, meaning that each type, query and mutation gets its own dedicated page.\\n\\nSee the template's [readme](https://github.com/magidoc-org/magidoc/blob/main/packages/starters/carbon-multi-page/README.md) if you use the [init](/cli/init) command.\\n\\n## Demo\\n\\nSee the latest example of this template on [Netlify](https://magidoc-carbon-multi-page.netlify.app).\\n\\n## Supported options\\n\\nThe following options are supported and can be provided via the [magidoc.mjs](/cli/magidoc-configuration) config file.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  website: {\\n    template: 'carbon-multi-page',\\n    options: {\\n      appTitle: 'Magidoc',\\n      appLogo: 'https://some-website/my-image.png',\\n      appFavicon: 'https://website.com/favicon.ico',\\n      siteRoot: '/docs',\\n      siteMeta: {\\n        description: 'My carbon template',\\n      },\\n      pages: [\\n        {\\n          title: 'Content',\\n          // This template supports only a single level of nesting.\\n          // All sub-levels will be discarded.\\n          content: [\\n            {\\n              title: 'SubContent',\\n              content: 'Your markdown here.',\\n            },\\n          ],\\n        },\\n      ],\\n      queryGenerationFactories: {},\\n    },\\n  },\\n}\\n```\\n\"}]},{\"title\":\"Plugins\",\"content\":[{\"title\":\"Introduction\",\"content\":\"# Introduction\\n\\n---\\n\\nThis section contains plugins that can be used within any javascript application, wether they are built for NodeJS, Svelte or any other frontend framework. They are completely independent of the Magidoc ecosystem.\\n\\nEach of these plugins also include TypeScript definitions.\\n\"},{\"title\":\"GraphQL-Query-Generator\",\"content\":\"# GraphQL Query Generator\\n\\n:::tags\\nstandalone, plugin, node, browser\\n:::\\n\\n---\\n\\nThe GraphQL Query Generator plugin does exactly as its name suggests: it automatically builds GraphQL queries and variables from a root query type.\\n\\nGenerating GraphQL queries requires complex logic that is abstracted by this library. It supports parameter generation, duplicate names, union types and much more.\\n\\n## Example\\n\\nHere is a sample query generated by the plugin.\\n\\n**Query**\\n\\n```graphql\\nquery getPerson($delay: Int, $delay2: Int) {\\n  person {\\n    name\\n    age(delay: $delay)\\n    friends {\\n      name\\n      age(delay: $delay2)\\n    }\\n  }\\n}\\n```\\n\\n**Variables**\\n\\n```json\\n{\\n  \\\"delay\\\": 20,\\n  \\\"delay2\\\": 20\\n}\\n```\\n\\n## Install\\n\\nThis plugin requires [GraphQL.js](https://www.npmjs.com/package/graphql) as a peer dependency.\\n\\n```bash\\npnpm install -D @magidoc/plugin-query-generator graphql\\n```\\n\\n## Usage\\n\\nHere is a sample usage with TypeScript that would generate the [above query](#example).\\n\\n```typescript\\nimport generateGraphQLQuery, {\\n  NullGenerationStrategy,\\n  QueryType,\\n} from '@magidoc/plugin-query-generator'\\nimport { buildClientSchema, type IntrospectionQuery } from 'graphql'\\nimport schemaJson from '_schema.json'\\n\\n// Use GraphQL.js to build the schema\\nconst schema = buildClientSchema(schemaJson as unknown as IntrospectionQuery)\\nconst personField = schema.getQueryType()?.getFields()['person']!!\\n\\n// Generate a query for the `person` field\\nconst result = generateGraphQLQuery(personField, {\\n  queryName: 'getPerson',\\n  queryType: QueryType.QUERY,\\n  maxDepth: 3,\\n  nullGenerationStrategy: NullGenerationStrategy.NEVER_NULL,\\n  factories: {},\\n})\\n\\nconsole.log(result)\\n```\\n\\n## Factories\\n\\nFactories are the most important part of the configuration. It allows customization of how the plugin generates the random values used as [query variables](https://graphql.org/learn/queries/#variables). The plugin offers many [default factories](https://github.com/pelletier197/magidoc/blob/main/packages/plugins/query-generator/src/generator/defaultFactories.ts). Each of these factories can be overwritten and custom ones can be added.\\n\\nFactories can be used to provide custom generators for [scalar types](https://graphql.org/learn/schema/#scalar-types) and [input values](https://graphql.org/learn/schema/#input-types).\\n\\n### Custom scalar types\\n\\nMany GraphQL APIs implement [custom scalars](https://www.apollographql.com/docs/apollo-server/schema/custom-scalars/). Since the plugin cannot automatically determine what is backing these scalars, a custom factory is required for them.\\n\\nFor instance, given schema has a scalar named `OddNumber`, representing any odd number.\\n\\n```graphql\\nscalar OddNumber\\n```\\n\\nThe factory below could be provided.\\n\\n```typescript\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    OddNumber: () => 5,\\n  },\\n})\\n```\\n\\n### Factory key\\n\\nThe key for the GraphQL factory object uses glob syntax to determine which factory to use. The factories are used in order of specificity, from the most specific to the least specific. Only the most specific factory will be used to generate the value.\\n\\nHere are examples of factories going from the most specific to the least specific.\\n\\n```typescript\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    '[OddNumber!]!': () => [5],\\n    '[OddNumber!]': () => [7],\\n    'OddNumber!': () => 9,\\n    OddNumber: () => 11,\\n    '*Number': () => 13,\\n  },\\n})\\n```\\n\\n#### Type unwrapping\\n\\nThe query generator uses type unwrapping to try to find a factory in all the provided values. This means that you generally don't need to provide a factory for a `[OddNumber!]!`, because a factory `OddNumber` will be used for all possible wrappings of the type: `OddNumber`, `OddNumber!`, `[OddNumber!]` and `[OddNumber!]!`.\\n\\n### Factory context\\n\\nSome GraphQL types, like `String`, are used widely within most GraphQL APIs. You may desire to return a different value for these types based on the context where they are used. This can be achieved using the `context` parameter provided in the factory function.\\n\\n```typescript\\nimport generateGraphQLQuery, { type QueryType } from '@magidoc/plugin-query-generator'\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    String: (context: GraphQLFactoryContext) => {\\n      switch(context.targetName.toLowerCase()) {\\n        case: 'email':\\n          return 'some-email@mycompany.com'\\n        case: 'policyName'\\n          return 'Policy Name'\\n        default: context.defaultFactory ? context.defaultFactory.provide() : 'abc'\\n      }\\n    },\\n  },\\n})\\n```\\n\\nThe parameters found in the context object and their description are described below.\\n\\n<!-- prettier-ignore -->\\n| Parameter      | Description |\\n|----------------|-------------|\\n| targetName     | Either the argument name or the nested field name. |\\n| defaultValue   | The default value provided in the GraphQL Schema. You may decide to use it by providing a factory that returns the default value if it is non-null. |\\n| defaultFactory | The default factory that exists for this type. Can be useful if you want to perform custom actions and fallback to the default provider. Note that this factory is always the factory for a scalar value. Thus, if you create a factory for a `[String!]!`, then the default factory will return a String, not an array of strings. You will be required to return an array yourself. This property is only available when overriding the default generators. |\\n| randomFactory  | The random factory that would be used to generate this object. This can be useful to fallback on a random object. This is only available when generating input values. |\\n| depth          | The current depth in the field generation. This does not include the depth of the current parameter. |\\n| path           | Path in the query to the current parameter. |\\n\"},{\"title\":\"Rollup-Fetch-GraphQL-Schema\",\"content\":\"# Rollup fetch GraphQL Schema\\n\\n:::tags\\nstandalone, plugin, rollup, vite\\n:::\\n\\n---\\n\\nThis rollup plugin fetches the GraphQL Schema required by Magidoc Plugins to build your website documentation. It performs a full [GraphQL Introspection Query](https://graphql.org/learn/introspection/) and stores the result on the file-system. This approach keeps your documentation independent from the actual API.\\n\\n:::notification type=\\\"info\\\"\\nThis plugin is also compatible with [ViteJS](https://vitejs.dev/), which is used by SvelteKit.\\n:::\\n\\n## Install\\n\\nFirst, add the module to your project.\\n\\n```bash\\npnpm install -D @magidoc/rollup-plugin-fetch-gql-schema\\n```\\n\\nThen, add the plugin to your `Rollup/ViteJS` configuration. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nimport fetchGraphQLSchema from '@magidoc/rollup-plugin-fetch-gql-schema'\\n\\nexport default {\\n  kit: {\\n    vite: {\\n      plugins: [\\n        fetchGraphQLSchema({\\n          url: 'https://your-api-url.com',\\n        }),\\n      ],\\n    },\\n  },\\n}\\n```\\n\\n## Configuration\\n\\nConfigurations are available for the plugin to change the behavior of the introspection query. Here is the full configuration example and its default values.\\n\\n```javascript\\nfetchGraphQLSchema({\\n  /**\\n   * Your API URL.\\n   */\\n  url: 'https://your-graphql-api-url.com/graphql',\\n\\n  /**\\n   * The HTTP Method to use.\\n   *\\n   * @default 'POST'\\n   */\\n  method: 'POST',\\n\\n  /**\\n   * Some APIs do not follow the GraphQL.js standard, so the introspection may be invalid for your API.\\n   * If this happens, you can specify a different introspection query to use.\\n   */\\n  query: '<introspection-query>',\\n\\n  /**\\n   * Optional headers to provide in the request.\\n   *\\n   * @default {}\\n   */\\n  headers: {},\\n\\n  /**\\n   * The target path where to put the introspection query result.\\n   * This defaults to the src asset directory of SvelteKit, so that the asset can be imported directly.\\n   *\\n   * @default 'src/_schema.json'\\n   */\\n  target: 'src/_schema.json',\\n})\\n```\\n\"},{\"title\":\"Rollup-Parse-GraphQL-Schema\",\"content\":\"# Rollup parse GraphQL Schema\\n\\n:::tags\\nstandalone, plugin, rollup, vite\\n:::\\n\\n---\\n\\nSimilar to what the [Rollup Fetch Plugin](/plugins/rollup-fetch-graphql-schema) does, the Rollup Parse Plugin generates an introspection schema from your [SDL files](https://www.apollographql.com/docs/apollo-server/schema/schema/#the-schema-definition-language) and stores the result on the file-system. This approach is usually simpler than interacting with a live endpoint if your API uses Authentication.\\n\\n:::notification type=\\\"info\\\"\\nThis plugin is also compatible with [ViteJS](https://vitejs.dev/), which is used by SvelteKit.\\n:::\\n\\n## Install\\n\\nFirst, add the module to your project.\\n\\n```bash\\npnpm install -D @magidoc/rollup-plugin-parse-gql-schema\\n```\\n\\nThen, add the plugin to your `Rollup/ViteJS` configuration. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nimport parseGraphQLSchema from '@magidoc/rollup-plugin-parse-gql-schema'\\n\\nexport default {\\n  kit: {\\n    vite: {\\n      plugins: [\\n        parseGraphQLSchema({\\n          paths: ['schema/**/*.graphqls'],\\n        }),\\n      ],\\n    },\\n  },\\n}\\n```\\n\\n## Configuration\\n\\nSome configuration is available as well for the plugin.\\n\\n```javascript\\nparseGraphQLSchema({\\n  /**\\n   * A mandatory list of paths where to the SDL files are located. Glob syntax is supported.\\n   */\\n  paths: ['schema/**/*.graphqls'],\\n\\n  /**\\n   * The target path where to put the introspection result.\\n   * This defaults to the src asset directory of SvelteKit, so that the asset can be imported directly.\\n   *\\n   * @default 'src/_schema.json'\\n   */\\n  target: 'src/_schema.json',\\n})\\n```\\n\"}]},{\"title\":\"Svelte Plugins\",\"content\":[{\"title\":\"Introduction\",\"content\":\"# Introduction\\n\\n---\\n\\nThis section contains Svelte-specific plugins that can be used within any Svelte/SvelteKit applications. These plugins can also be used outside of the Magidoc ecosystem.\\n\\nEach of these plugins also include TypeScript definitions.\\n\"},{\"title\":\"PrismJS\",\"content\":\"# PrismJS\\n\\n:::tags\\nstandalone, plugin, svelte\\n:::\\n\\n---\\n\\nThe PrismJS plugin is a Svelte plugin built with TypeScript for displaying code inside the browser, using [PrismJS](https://www.npmjs.com/package/prismjs).\\n\\n## Install\\n\\nPrismJS is required as a peer dependency so you can use the themes and languages provided.\\n\\n```bash\\npnpm install -D @magidoc/plugin-svelte-prismjs prismjs @types/prismjs\\n```\\n\\nFor SvelteKit users, `prismjs` needs to be added to the `noExternal` dependencies. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nexport default {\\n  kit: {\\n    vite: {\\n      ssr: {\\n        noExternal: ['prismjs'],\\n      },\\n    },\\n  },\\n}\\n```\\n\\n## Usage\\n\\nThe plugin exposes attributes to provide the source and the language. Attributes to display line numbers and a copy button are also available.\\n\\n```svelte\\n<script lang=\\\"ts\\\">\\n  import Prism from '@magidoc/plugin-svelte-prismjs'\\n<\/script>\\n\\n<Prism\\n  language={'javascript'}\\n  source={`\\n    const x = 'best plugin ever'\\n    console.log(x)\\n  `}\\n  showLineNumbers\\n  showCopyButton\\n/>\\n```\\n\\n## Install languages\\n\\nPrismJS supports a [ton of languages](https://prismjs.com/#supported-languages) out of the box. You can use any of these languages simply by importing the syntax highlighting. Languages install themselves automatically, but PrismJS must be imported first.\\n\\n```svelte\\n<script lang=\\\"ts\\\">\\n  import Prism from '@magidoc/plugin-svelte-prismjs'\\n  import 'prismjs/components/prism-graphql'\\n  import 'prism-svelte' // https://github.com/pngwn/prism-svelte\\n<\/script>\\n```\\n\\n## Themes\\n\\nYou can modify Prism code sections style simply by importing a stylesheet. PrismJS provides many [themes](https://github.com/PrismJS/prism/tree/master/themes) out of the box that you can easily import. Otherwise, there is a wide variety of themes available on the web and even a [theme generator](https://k88hudson.github.io/syntax-highlighting-theme-generator/www/).\\n\\n```svelte\\n<script lang=\\\"ts\\\">\\n  import Prism from '@magidoc/plugin-svelte-prismjs'\\n  import 'prismjs/themes/prism-dark.css'\\n<\/script>\\n```\\n\\n:::notification type=\\\"info\\\"\\nThis website uses the PrismJS plugin to display code. If you like the theme used, it is a slightly modified version of the OneDark theme and is available [here](https://github.com/magidoc-org/magidoc/blob/main/packages/plugins/svelte-carbon-commons/src/lib/markdown/prism-theme.css).\\n:::\\n\"}]}]",VITE_SITE_ROOT:"/magidoc",VITE_SITE_META:'{"description":"Fast and highly customizable GraphQL documentation generator","og:description":"Fast and highly customizable GraphQL documentation generator","keywords":"Svelte,Svelte-Kit,PrismJS,GraphQL,Documentation,Static","author":"Magidoc-org","og:title":"Magidoc","og:type":"article","og:image":"https://raw.githubusercontent.com/magidoc-org/magidoc/main/logo/logo_full.png"}',VITE_APP_TITLE:"Magidoc",VITE_SVELTEKIT_APP_VERSION:"1653324200025",VITE_SVELTEKIT_APP_VERSION_FILE:"_app/version.json",VITE_SVELTEKIT_APP_VERSION_POLL_INTERVAL:"0",BASE_URL:"/magidoc/_app/",MODE:"production",DEV:!1,PROD:!0})||{});function Vt(o,e){return un.map(ie(ie({},zt(o)),e||{}),(n,t)=>({name:t,content:n})).filter(n=>!!n.content)}function zt(o){const e=`${o.appTitle}'s GraphQL documentation`;return{keywords:`graphql,api,documentation,${o.appTitle}`,description:e,"og:title":o.appTitle,"og:type":"article","og:image":o.appIcon,"og:site_name":o.appTitle,"og:description":e}}function Ve(o,e,n){const t=o.slice();return t[7]=e[n],t}function ze(o){let e,n,t;return{c(){e=Q("meta"),this.h()},l(a){e=E(a,"META",{name:!0,content:!0}),this.h()},h(){X(e,"name",n=o[7].name),X(e,"content",t=o[7].content)},m(a,i){G(a,e,i)},p(a,i){i&2&&n!==(n=a[7].name)&&X(e,"name",n),i&2&&t!==(t=a[7].content)&&X(e,"content",t)},d(a){a&&v(e)}}}function Jt(o){let e;return{c(){e=Q("link"),this.h()},l(n){e=E(n,"LINK",{rel:!0,href:!0}),this.h()},h(){X(e,"rel","icon"),X(e,"href",o[3])},m(n,t){G(n,e,t)},p:le,d(n){n&&v(e)}}}function Ht(o){let e;const n=o[4].default,t=H(n,o,o[6],null);return{c(){t&&t.c()},l(a){t&&t.l(a)},m(a,i){t&&t.m(a,i),e=!0},p(a,i){t&&t.p&&(!e||i&64)&&U(t,n,a,a[6],e?B(n,a[6],i,null):Y(a[6]),null)},i(a){e||(b(t,a),e=!0)},o(a){_(t,a),e=!1},d(a){t&&t.d(a)}}}function Ut(o){let e,n;return e=new Fn({props:{$$slots:{default:[Ht]},$$scope:{ctx:o}}}),{c(){O(e.$$.fragment)},l(t){C(e.$$.fragment,t)},m(t,a){A(e,t,a),n=!0},p(t,a){const i={};a&64&&(i.$$scope={dirty:a,ctx:t}),e.$set(i)},i(t){n||(b(e.$$.fragment,t),n=!0)},o(t){_(e.$$.fragment,t),n=!1},d(t){x(e,t)}}}function Yt(o){let e,n;return e=new Ln({props:{$$slots:{default:[Ut]},$$scope:{ctx:o}}}),{c(){O(e.$$.fragment)},l(t){C(e.$$.fragment,t)},m(t,a){A(e,t,a),n=!0},p(t,a){const i={};a&64&&(i.$$scope={dirty:a,ctx:t}),e.$set(i)},i(t){n||(b(e.$$.fragment,t),n=!0)},o(t){_(e.$$.fragment,t),n=!1},d(t){x(e,t)}}}function Bt(o){let e,n;return e=new Qn({props:{$$slots:{default:[Yt]},$$scope:{ctx:o}}}),{c(){O(e.$$.fragment)},l(t){C(e.$$.fragment,t)},m(t,a){A(e,t,a),n=!0},p(t,a){const i={};a&64&&(i.$$scope={dirty:a,ctx:t}),e.$set(i)},i(t){n||(b(e.$$.fragment,t),n=!0)},o(t){_(e.$$.fragment,t),n=!1},d(t){x(e,t)}}}function Kt(o){let e,n,t,a,i,s,r,l,h,c,m,d=o[1],u=[];for(let T=0;T<d.length;T+=1)u[T]=ze(Ve(o,d,T));let f=o[3]&&Jt(o);function g(T){o[5](T)}let y={};return o[2]!==void 0&&(y.isSideNavOpen=o[2]),i=new st({props:y}),oe.push(()=>be(i,"isSideNavOpen",g)),l=new Ct({props:{isOpen:o[2],content:o[0]}}),c=new yn({props:{$$slots:{default:[Bt]},$$scope:{ctx:o}}}),{c(){for(let T=0;T<u.length;T+=1)u[T].c();e=D(),f&&f.c(),n=D(),t=Z(),a=Q("main"),O(i.$$.fragment),r=Z(),O(l.$$.fragment),h=Z(),O(c.$$.fragment)},l(T){const k=rn('[data-svelte="svelte-1iai202"]',document.head);for(let L=0;L<u.length;L+=1)u[L].l(k);e=D(),f&&f.l(k),n=D(),k.forEach(v),t=$(T),a=E(T,"MAIN",{});var P=M(a);C(i.$$.fragment,P),r=$(P),C(l.$$.fragment,P),h=$(P),C(c.$$.fragment,P),P.forEach(v)},m(T,k){for(let P=0;P<u.length;P+=1)u[P].m(document.head,null);N(document.head,e),f&&f.m(document.head,null),N(document.head,n),G(T,t,k),G(T,a,k),A(i,a,null),N(a,r),A(l,a,null),N(a,h),A(c,a,null),m=!0},p(T,[k]){if(k&2){d=T[1];let w;for(w=0;w<d.length;w+=1){const j=Ve(T,d,w);u[w]?u[w].p(j,k):(u[w]=ze(j),u[w].c(),u[w].m(e.parentNode,e))}for(;w<u.length;w+=1)u[w].d(1);u.length=d.length}T[3]&&f.p(T,k);const P={};!s&&k&4&&(s=!0,P.isSideNavOpen=T[2],ye(()=>s=!1)),i.$set(P);const L={};k&4&&(L.isOpen=T[2]),k&1&&(L.content=T[0]),l.$set(L);const p={};k&64&&(p.$$scope={dirty:k,ctx:T}),c.$set(p)},i(T){m||(b(i.$$.fragment,T),b(l.$$.fragment,T),b(c.$$.fragment,T),m=!0)},o(T){_(i.$$.fragment,T),_(l.$$.fragment,T),_(c.$$.fragment,T),m=!1},d(T){ve(u,T),v(e),f&&f.d(T),v(n),T&&v(t),T&&v(a),x(i),x(l),x(c)}}}function ta(){return{stuff:{homeUrl:cn,schema:Le},props:{schema:Le,content:pn,meta:Dt}}}function Wt(o,e,n){let{$$slots:t={},$$scope:a}=e,i,{content:s}=e,{meta:r}=e;const l=he.APP_FAVICON.vite.get({VITE_MAGIDOC_GENERATE:"true",VITE_PAGES:"[{\"title\":\"Introduction\",\"content\":[{\"title\":\"Welcome\",\"content\":\"# Welcome\\n\\n---\\n\\nWelcome to **Magidoc**! Magidoc a is a free open source tool to build static documentation websites for GraphQL APIs. It aims to provide a vast variety of templates and plugins, giving you access to a large range of customization options to fit your needs.\\n\\n## Features\\n\\n- \u{1F3C1} **Simple** - Build your first website in a few minutes.\\n\\n- \u270F\uFE0F **Customizable** - Use pre-defined customizations or pick a template and make it your own.\\n\\n- \u{1F4E6} **Fully Typed** - Every plugin and template ships with TypeScript definitions out of the box.\\n\\n- \u{1F4DD} **Markdown Support** - Markdown is supported everywhere, from the custom pages you create to the [SDL comments](https://dgraph.io/docs/graphql/schema/documentation/).\\n\\n## Why Magidoc?\\n\\nIn the GraphQL world, there are online web IDEs to play with GraphQL schemas. Namely, tools like [GraphiQL](https://github.com/graphql/graphiql) are great for developers to play with your API. However, even though some documentation is available in these tools, it is not easily searchable, discoverability is difficult, and most of all, it lacks of a way to present concepts, workflows and examples.\\n\\nMagidoc helps you achieve this with minimal effort. Either choose between one of the provided base templates with limited customization options, or generate a starter project and customize it however you want using technologies you may (or may not \u{1F608}) already know, like [TypeScript](https://www.typescriptlang.org/), [Svelte](https://svelte.dev/) (using [Svelte-Kit](https://kit.svelte.dev/)), and many others.\\n\"},{\"title\":\"Get Started\",\"content\":\"# Get Started\\n\\n---\\n\\n## 1) Configuration file\\n\\nThe first thing to do is to create a Magidoc configuration file. Here is a minimal `magidoc.mjs` example.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  introspection: {\\n    type: 'url',\\n    url: 'https://graphiql-test.netlify.app/.netlify/functions/schema-demo',\\n  },\\n  website: {\\n    template: 'carbon-multi-page',\\n  },\\n}\\n```\\n\\nFor the full reference, see the dedicated [Magidoc Configuration](/cli/magidoc-configuration) page.\\n\\n## 2) Run Magidoc Generate\\n\\n```bash\\nnpx @magidoc/cli@latest generate\\n```\\n\\nFor more details on how to use the `generate` command, see the [related documentation](/cli/generate).\\n\\n## 3) That's it!\\n\\nThe built static website outputs in the `./docs` folder by default. To preview the website locally, run the following command.\\n\\n```bash\\nnpx @magidoc/cli@latest preview\\n```\\n\"}]},{\"title\":\"Cli\",\"content\":[{\"title\":\"Magidoc Configuration\",\"content\":\"# Magidoc configuration\\n\\n---\\n\\nThe website is customizable through different options defined in a `magidoc.mjs`. The `mjs` extension tells Node to load the javascript file as an [ES Module](https://nodejs.org/api/esm.html), allowing you to use the `import/export` syntax.\\n\\n## Introspection\\n\\nThe introspection query can be fetched from different locations based on the `type` property.\\n\\n### URL\\n\\nFetches the introspection schema from a live API endpoint using the introspection query.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * Mandatory url type\\n     */\\n    type: 'url',\\n\\n    /**\\n     * Your API URL.\\n     */\\n    url: 'https://your-graphql-api-url.com/graphql',\\n\\n    /**\\n     * The HTTP Method to use.\\n     *\\n     * @default 'POST'\\n     */\\n    method: 'POST',\\n\\n    /**\\n     * Some APIs do not follow the GraphQL.js standard, so the introspection may be invalid for your API.\\n     * If this happens, you can specify a different introspection query to use.\\n     */\\n    query: '<introspection-query>',\\n\\n    /**\\n     * Optional headers to provide in the request.\\n     */\\n    headers: {\\n      /**\\n       * Since we use configuration as code, you can perform\\n       * authentication in this file or use environment variables.\\n       */\\n      Authorization: 'Bearer xxx',\\n    },\\n  },\\n}\\n```\\n\\n### SDL\\n\\nParses GraphQL [SDL](https://www.apollographql.com/docs/apollo-server/schema/schema/#the-schema-definition-language) files into the introspection schema to generate the documentation. SDL files usually use the extension `.graphql` or `.graphqls`.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * SDL introspection type\\n     */\\n    type: 'sdl',\\n\\n    /**\\n     * A mandatory paths array where the schema files can be found.\\n     * Glob syntax is supported in case your schema is split into multiple files.\\n     */\\n    paths: ['schemas/**/*.graphqls'],\\n  },\\n}\\n```\\n\\n### File\\n\\nUses the introspection schema from a local JSON file rather than fetching from an endpoint.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * Mandatory file type\\n     */\\n    type: 'file',\\n\\n    /**\\n     * The location of the file. If you use a relative path here,\\n     * it will be relative to where the Magidoc CLI is launched.\\n     */\\n    location: '/a/path/to/schema.json',\\n  },\\n}\\n```\\n\\n### Raw\\n\\nProvides the JSON schema in a raw string.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * Mandatory raw type\\n     */\\n    type: 'raw',\\n\\n    /**\\n     * The raw content of the introspection result.\\n     */\\n    content: '{__schema: {}}',\\n  },\\n}\\n```\\n\\n## Website\\n\\nThe website object specifies different options for building the documentation website.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  introspection: {\\n    // ...\\n  },\\n  website: {\\n    /**\\n     * The template to use for the website.\\n     */\\n    template: 'carbon-multi-page',\\n\\n    /**\\n     * Optional template version to use.\\n     * Changing this may cause the build to fail depending on the\\n     * changes between the version of the cli and the template\\n     *\\n     * @default current CLI version\\n     */\\n    templateVersion: '<magidoc-version>',\\n\\n    /**\\n     * The optional output location for the built website.\\n     *\\n     * @default './docs'\\n     */\\n    output: './docs',\\n\\n    /**\\n     * Options to use for the website.\\n     * Some templates may not support all options.\\n     * Make sure you check the documentation of the chosen template.\\n     */\\n    options: {\\n      /**\\n       * Your application title.\\n       *\\n       * @default 'Magidoc'\\n       */\\n      appTitle: 'Magidoc',\\n\\n      /**\\n       * Your application logo. For now, only URLs are supported.\\n       *\\n       * @default (magidoc logo)\\n       */\\n      appLogo: 'https://website.com/logo.png',\\n\\n      /**\\n       * Your application's favicon. For now, only URLs are supported.\\n       *\\n       * @default (magidoc logo)\\n       */\\n      appFavicon: 'https://website.com/favicon.ico',\\n\\n      /**\\n       * The a root path where your website will be served from.\\n       * It is common to see docs websites hosted on a /docs path.\\n       * Example: https://your-website.com/docs\\n       *\\n       * If your website is served from the root path, leave this undefined.\\n       *\\n       * @default undefined\\n       */\\n      siteRoot: '/docs',\\n\\n      /**\\n       * Customizes the website meta tags in the header of the HTML pages.\\n       * Any meta tags with the following format are supported:\\n       *\\n       * <meta name={key} content={value} />\\n       *\\n       * A list of common tags can be found here: https://gist.github.com/whitingx/3840905\\n       *\\n       * @default (arbitrary title, description and image are generated from `appTitle` and `appLogo`)\\n       */\\n      siteMeta: {\\n        description: 'This is your website description',\\n        keywords: 'svelte,docs,magidoc,cool',\\n      },\\n\\n      /**\\n       * Customize pages and their content. Each of these pages will be presented before the graphQL documentation.\\n       * Use this to present your API urls, authentication flows, designs, concepts, or whatever you want.\\n       *\\n       * @default (A default Magidoc page)\\n       */\\n      pages: [\\n        {\\n          /**\\n           * Each page must have a title for the navbar.\\n           */\\n          title: 'First item',\\n\\n          /**\\n           * The content. Markdown is supported, but be careful with the indentation.\\n           * Javascript multi-line templates conserve the indentation you have in your strings, which will not output properly.\\n           * It is recommended to either get your markdown from files or use a library to un-indent your strings.\\n           *\\n           * @see: https://www.npmjs.com/package/dedent\\n           */\\n          content: `\\n            # Title\\n\\n            Your markdown here\\n          `,\\n        },\\n        {\\n          title: 'Second Item',\\n          /**\\n           * Content can also be an array of sub-pages.\\n           * Some templates may not support multi-level nesting.\\n           * Make sure to check out the documentation of your template.\\n           */\\n          content: [\\n            {\\n              title: 'Nested Item',\\n              content: `Same as before`,\\n            },\\n          ],\\n        },\\n      ],\\n\\n      /**\\n       * Optional query generation factory. See more details below\\n       *\\n       * @default {}\\n       */\\n      queryGenerationFactories: {\\n        'Int!': 420,\\n        String: 'abc',\\n      },\\n    },\\n  },\\n}\\n```\\n\\nThe list of available templates can be found on the [templates page](/templates/introduction).\\n\\n### queryGenerationFactories\\n\\nThe query generation factories are used to customize query parameters in the generated queries. This is useful in the event that your API contains custom scalars, or that you want to return custom values for a type.\\n\\nTo know more about the extent of what is possible with `queryGenerationFactories`, read the [query generator](/plugins/graphql-query-generator) documentation.\\n\\n:::notification type=\\\"warning\\\"\\nMagidoc CLI uses environment variables to pass options to the templates, which means that functions are not supported here, unlike when using the `graphql-query-generator` directly. If you wish to have more customization options of the output variables, you will need to use the [init command](/cli/init) and customize the template directly.\\n:::\\n\"},{\"title\":\"Generate\",\"content\":\"# Command - Generate\\n\\n---\\n\\nThe `generate command` builds a static website using the `magidoc.mjs` configuration file as input. Use the `--help` option to discover more about the optional parameters you can use.\\n\\n```bash\\nnpx @magidoc/cli@latest generate --help\\n```\\n\\nOnce your website is built successfully, the output can be previewed locally using the `preview` command. This command also uses the `magidoc.mjs` file.\\n\\n```bash\\nnpx @magidoc/cli@latest preview --help\\n```\\n\"},{\"title\":\"Init\",\"content\":\"# Command - Init\\n\\n---\\n\\nIn case the available customizations are not sufficient for your needs, it is possible to initialize a starter project using any of the [available templates](/templates/introduction) and customize it however you want.\\n\\n:::notification type=\\\"info\\\"\\nIf your customization needs are small and could be useful to other users, you are welcome to open an issue or contribute to add the customization to the template instead.\\n:::\\n\\n:::notification type=\\\"warning\\\"\\nIf you decide to go on with the init command, you will no longer benefit from the template updates of Magidoc. You will need to keep the plugins and libraries up to date by yourself.\\n:::\\n\\nTo see all the available options for the `init command`, run the following.\\n\\n```bash\\nnpx @magidoc/cli@latest init --help\\n```\\n\\nWhen initializing a template, you may choose one of the [Magidoc templates](/templates/introduction). You also have the option to choose a package manager. The recommended default package manager is [Pnpm](https://pnpm.io/workspaces).\\n\"}]},{\"title\":\"Templates\",\"content\":[{\"title\":\"Introduction\",\"content\":\"# Introduction\\n\\n---\\n\\nThis section contains a list of all the available templates to be used either with the [generate](/cli/generate) or [init](/cli/init) commands.\\n\\n- [carbon-multi-page](/templates/carbon-multi-page)\\n\"},{\"title\":\"Carbon-multi-page\",\"content\":\"# Template - Carbon Multi-Page\\n\\n:::tags\\nsvelte,svelte-kit\\n:::\\n\\n---\\n\\nThis starter uses IBM's [Carbon Design](https://carbondesignsystem.com/) in a multi-page documentation, meaning that each type, query and mutation gets its own dedicated page.\\n\\nSee the template's [readme](https://github.com/magidoc-org/magidoc/blob/main/packages/starters/carbon-multi-page/README.md) if you use the [init](/cli/init) command.\\n\\n## Demo\\n\\nSee the latest example of this template on [Netlify](https://magidoc-carbon-multi-page.netlify.app).\\n\\n## Supported options\\n\\nThe following options are supported and can be provided via the [magidoc.mjs](/cli/magidoc-configuration) config file.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  website: {\\n    template: 'carbon-multi-page',\\n    options: {\\n      appTitle: 'Magidoc',\\n      appLogo: 'https://some-website/my-image.png',\\n      appFavicon: 'https://website.com/favicon.ico',\\n      siteRoot: '/docs',\\n      siteMeta: {\\n        description: 'My carbon template',\\n      },\\n      pages: [\\n        {\\n          title: 'Content',\\n          // This template supports only a single level of nesting.\\n          // All sub-levels will be discarded.\\n          content: [\\n            {\\n              title: 'SubContent',\\n              content: 'Your markdown here.',\\n            },\\n          ],\\n        },\\n      ],\\n      queryGenerationFactories: {},\\n    },\\n  },\\n}\\n```\\n\"}]},{\"title\":\"Plugins\",\"content\":[{\"title\":\"Introduction\",\"content\":\"# Introduction\\n\\n---\\n\\nThis section contains plugins that can be used within any javascript application, wether they are built for NodeJS, Svelte or any other frontend framework. They are completely independent of the Magidoc ecosystem.\\n\\nEach of these plugins also include TypeScript definitions.\\n\"},{\"title\":\"GraphQL-Query-Generator\",\"content\":\"# GraphQL Query Generator\\n\\n:::tags\\nstandalone, plugin, node, browser\\n:::\\n\\n---\\n\\nThe GraphQL Query Generator plugin does exactly as its name suggests: it automatically builds GraphQL queries and variables from a root query type.\\n\\nGenerating GraphQL queries requires complex logic that is abstracted by this library. It supports parameter generation, duplicate names, union types and much more.\\n\\n## Example\\n\\nHere is a sample query generated by the plugin.\\n\\n**Query**\\n\\n```graphql\\nquery getPerson($delay: Int, $delay2: Int) {\\n  person {\\n    name\\n    age(delay: $delay)\\n    friends {\\n      name\\n      age(delay: $delay2)\\n    }\\n  }\\n}\\n```\\n\\n**Variables**\\n\\n```json\\n{\\n  \\\"delay\\\": 20,\\n  \\\"delay2\\\": 20\\n}\\n```\\n\\n## Install\\n\\nThis plugin requires [GraphQL.js](https://www.npmjs.com/package/graphql) as a peer dependency.\\n\\n```bash\\npnpm install -D @magidoc/plugin-query-generator graphql\\n```\\n\\n## Usage\\n\\nHere is a sample usage with TypeScript that would generate the [above query](#example).\\n\\n```typescript\\nimport generateGraphQLQuery, {\\n  NullGenerationStrategy,\\n  QueryType,\\n} from '@magidoc/plugin-query-generator'\\nimport { buildClientSchema, type IntrospectionQuery } from 'graphql'\\nimport schemaJson from '_schema.json'\\n\\n// Use GraphQL.js to build the schema\\nconst schema = buildClientSchema(schemaJson as unknown as IntrospectionQuery)\\nconst personField = schema.getQueryType()?.getFields()['person']!!\\n\\n// Generate a query for the `person` field\\nconst result = generateGraphQLQuery(personField, {\\n  queryName: 'getPerson',\\n  queryType: QueryType.QUERY,\\n  maxDepth: 3,\\n  nullGenerationStrategy: NullGenerationStrategy.NEVER_NULL,\\n  factories: {},\\n})\\n\\nconsole.log(result)\\n```\\n\\n## Factories\\n\\nFactories are the most important part of the configuration. It allows customization of how the plugin generates the random values used as [query variables](https://graphql.org/learn/queries/#variables). The plugin offers many [default factories](https://github.com/pelletier197/magidoc/blob/main/packages/plugins/query-generator/src/generator/defaultFactories.ts). Each of these factories can be overwritten and custom ones can be added.\\n\\nFactories can be used to provide custom generators for [scalar types](https://graphql.org/learn/schema/#scalar-types) and [input values](https://graphql.org/learn/schema/#input-types).\\n\\n### Custom scalar types\\n\\nMany GraphQL APIs implement [custom scalars](https://www.apollographql.com/docs/apollo-server/schema/custom-scalars/). Since the plugin cannot automatically determine what is backing these scalars, a custom factory is required for them.\\n\\nFor instance, given schema has a scalar named `OddNumber`, representing any odd number.\\n\\n```graphql\\nscalar OddNumber\\n```\\n\\nThe factory below could be provided.\\n\\n```typescript\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    OddNumber: () => 5,\\n  },\\n})\\n```\\n\\n### Factory key\\n\\nThe key for the GraphQL factory object uses glob syntax to determine which factory to use. The factories are used in order of specificity, from the most specific to the least specific. Only the most specific factory will be used to generate the value.\\n\\nHere are examples of factories going from the most specific to the least specific.\\n\\n```typescript\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    '[OddNumber!]!': () => [5],\\n    '[OddNumber!]': () => [7],\\n    'OddNumber!': () => 9,\\n    OddNumber: () => 11,\\n    '*Number': () => 13,\\n  },\\n})\\n```\\n\\n#### Type unwrapping\\n\\nThe query generator uses type unwrapping to try to find a factory in all the provided values. This means that you generally don't need to provide a factory for a `[OddNumber!]!`, because a factory `OddNumber` will be used for all possible wrappings of the type: `OddNumber`, `OddNumber!`, `[OddNumber!]` and `[OddNumber!]!`.\\n\\n### Factory context\\n\\nSome GraphQL types, like `String`, are used widely within most GraphQL APIs. You may desire to return a different value for these types based on the context where they are used. This can be achieved using the `context` parameter provided in the factory function.\\n\\n```typescript\\nimport generateGraphQLQuery, { type QueryType } from '@magidoc/plugin-query-generator'\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    String: (context: GraphQLFactoryContext) => {\\n      switch(context.targetName.toLowerCase()) {\\n        case: 'email':\\n          return 'some-email@mycompany.com'\\n        case: 'policyName'\\n          return 'Policy Name'\\n        default: context.defaultFactory ? context.defaultFactory.provide() : 'abc'\\n      }\\n    },\\n  },\\n})\\n```\\n\\nThe parameters found in the context object and their description are described below.\\n\\n<!-- prettier-ignore -->\\n| Parameter      | Description |\\n|----------------|-------------|\\n| targetName     | Either the argument name or the nested field name. |\\n| defaultValue   | The default value provided in the GraphQL Schema. You may decide to use it by providing a factory that returns the default value if it is non-null. |\\n| defaultFactory | The default factory that exists for this type. Can be useful if you want to perform custom actions and fallback to the default provider. Note that this factory is always the factory for a scalar value. Thus, if you create a factory for a `[String!]!`, then the default factory will return a String, not an array of strings. You will be required to return an array yourself. This property is only available when overriding the default generators. |\\n| randomFactory  | The random factory that would be used to generate this object. This can be useful to fallback on a random object. This is only available when generating input values. |\\n| depth          | The current depth in the field generation. This does not include the depth of the current parameter. |\\n| path           | Path in the query to the current parameter. |\\n\"},{\"title\":\"Rollup-Fetch-GraphQL-Schema\",\"content\":\"# Rollup fetch GraphQL Schema\\n\\n:::tags\\nstandalone, plugin, rollup, vite\\n:::\\n\\n---\\n\\nThis rollup plugin fetches the GraphQL Schema required by Magidoc Plugins to build your website documentation. It performs a full [GraphQL Introspection Query](https://graphql.org/learn/introspection/) and stores the result on the file-system. This approach keeps your documentation independent from the actual API.\\n\\n:::notification type=\\\"info\\\"\\nThis plugin is also compatible with [ViteJS](https://vitejs.dev/), which is used by SvelteKit.\\n:::\\n\\n## Install\\n\\nFirst, add the module to your project.\\n\\n```bash\\npnpm install -D @magidoc/rollup-plugin-fetch-gql-schema\\n```\\n\\nThen, add the plugin to your `Rollup/ViteJS` configuration. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nimport fetchGraphQLSchema from '@magidoc/rollup-plugin-fetch-gql-schema'\\n\\nexport default {\\n  kit: {\\n    vite: {\\n      plugins: [\\n        fetchGraphQLSchema({\\n          url: 'https://your-api-url.com',\\n        }),\\n      ],\\n    },\\n  },\\n}\\n```\\n\\n## Configuration\\n\\nConfigurations are available for the plugin to change the behavior of the introspection query. Here is the full configuration example and its default values.\\n\\n```javascript\\nfetchGraphQLSchema({\\n  /**\\n   * Your API URL.\\n   */\\n  url: 'https://your-graphql-api-url.com/graphql',\\n\\n  /**\\n   * The HTTP Method to use.\\n   *\\n   * @default 'POST'\\n   */\\n  method: 'POST',\\n\\n  /**\\n   * Some APIs do not follow the GraphQL.js standard, so the introspection may be invalid for your API.\\n   * If this happens, you can specify a different introspection query to use.\\n   */\\n  query: '<introspection-query>',\\n\\n  /**\\n   * Optional headers to provide in the request.\\n   *\\n   * @default {}\\n   */\\n  headers: {},\\n\\n  /**\\n   * The target path where to put the introspection query result.\\n   * This defaults to the src asset directory of SvelteKit, so that the asset can be imported directly.\\n   *\\n   * @default 'src/_schema.json'\\n   */\\n  target: 'src/_schema.json',\\n})\\n```\\n\"},{\"title\":\"Rollup-Parse-GraphQL-Schema\",\"content\":\"# Rollup parse GraphQL Schema\\n\\n:::tags\\nstandalone, plugin, rollup, vite\\n:::\\n\\n---\\n\\nSimilar to what the [Rollup Fetch Plugin](/plugins/rollup-fetch-graphql-schema) does, the Rollup Parse Plugin generates an introspection schema from your [SDL files](https://www.apollographql.com/docs/apollo-server/schema/schema/#the-schema-definition-language) and stores the result on the file-system. This approach is usually simpler than interacting with a live endpoint if your API uses Authentication.\\n\\n:::notification type=\\\"info\\\"\\nThis plugin is also compatible with [ViteJS](https://vitejs.dev/), which is used by SvelteKit.\\n:::\\n\\n## Install\\n\\nFirst, add the module to your project.\\n\\n```bash\\npnpm install -D @magidoc/rollup-plugin-parse-gql-schema\\n```\\n\\nThen, add the plugin to your `Rollup/ViteJS` configuration. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nimport parseGraphQLSchema from '@magidoc/rollup-plugin-parse-gql-schema'\\n\\nexport default {\\n  kit: {\\n    vite: {\\n      plugins: [\\n        parseGraphQLSchema({\\n          paths: ['schema/**/*.graphqls'],\\n        }),\\n      ],\\n    },\\n  },\\n}\\n```\\n\\n## Configuration\\n\\nSome configuration is available as well for the plugin.\\n\\n```javascript\\nparseGraphQLSchema({\\n  /**\\n   * A mandatory list of paths where to the SDL files are located. Glob syntax is supported.\\n   */\\n  paths: ['schema/**/*.graphqls'],\\n\\n  /**\\n   * The target path where to put the introspection result.\\n   * This defaults to the src asset directory of SvelteKit, so that the asset can be imported directly.\\n   *\\n   * @default 'src/_schema.json'\\n   */\\n  target: 'src/_schema.json',\\n})\\n```\\n\"}]},{\"title\":\"Svelte Plugins\",\"content\":[{\"title\":\"Introduction\",\"content\":\"# Introduction\\n\\n---\\n\\nThis section contains Svelte-specific plugins that can be used within any Svelte/SvelteKit applications. These plugins can also be used outside of the Magidoc ecosystem.\\n\\nEach of these plugins also include TypeScript definitions.\\n\"},{\"title\":\"PrismJS\",\"content\":\"# PrismJS\\n\\n:::tags\\nstandalone, plugin, svelte\\n:::\\n\\n---\\n\\nThe PrismJS plugin is a Svelte plugin built with TypeScript for displaying code inside the browser, using [PrismJS](https://www.npmjs.com/package/prismjs).\\n\\n## Install\\n\\nPrismJS is required as a peer dependency so you can use the themes and languages provided.\\n\\n```bash\\npnpm install -D @magidoc/plugin-svelte-prismjs prismjs @types/prismjs\\n```\\n\\nFor SvelteKit users, `prismjs` needs to be added to the `noExternal` dependencies. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nexport default {\\n  kit: {\\n    vite: {\\n      ssr: {\\n        noExternal: ['prismjs'],\\n      },\\n    },\\n  },\\n}\\n```\\n\\n## Usage\\n\\nThe plugin exposes attributes to provide the source and the language. Attributes to display line numbers and a copy button are also available.\\n\\n```svelte\\n<script lang=\\\"ts\\\">\\n  import Prism from '@magidoc/plugin-svelte-prismjs'\\n<\/script>\\n\\n<Prism\\n  language={'javascript'}\\n  source={`\\n    const x = 'best plugin ever'\\n    console.log(x)\\n  `}\\n  showLineNumbers\\n  showCopyButton\\n/>\\n```\\n\\n## Install languages\\n\\nPrismJS supports a [ton of languages](https://prismjs.com/#supported-languages) out of the box. You can use any of these languages simply by importing the syntax highlighting. Languages install themselves automatically, but PrismJS must be imported first.\\n\\n```svelte\\n<script lang=\\\"ts\\\">\\n  import Prism from '@magidoc/plugin-svelte-prismjs'\\n  import 'prismjs/components/prism-graphql'\\n  import 'prism-svelte' // https://github.com/pngwn/prism-svelte\\n<\/script>\\n```\\n\\n## Themes\\n\\nYou can modify Prism code sections style simply by importing a stylesheet. PrismJS provides many [themes](https://github.com/PrismJS/prism/tree/master/themes) out of the box that you can easily import. Otherwise, there is a wide variety of themes available on the web and even a [theme generator](https://k88hudson.github.io/syntax-highlighting-theme-generator/www/).\\n\\n```svelte\\n<script lang=\\\"ts\\\">\\n  import Prism from '@magidoc/plugin-svelte-prismjs'\\n  import 'prismjs/themes/prism-dark.css'\\n<\/script>\\n```\\n\\n:::notification type=\\\"info\\\"\\nThis website uses the PrismJS plugin to display code. If you like the theme used, it is a slightly modified version of the OneDark theme and is available [here](https://github.com/magidoc-org/magidoc/blob/main/packages/plugins/svelte-carbon-commons/src/lib/markdown/prism-theme.css).\\n:::\\n\"}]}]",VITE_SITE_ROOT:"/magidoc",VITE_SITE_META:'{"description":"Fast and highly customizable GraphQL documentation generator","og:description":"Fast and highly customizable GraphQL documentation generator","keywords":"Svelte,Svelte-Kit,PrismJS,GraphQL,Documentation,Static","author":"Magidoc-org","og:title":"Magidoc","og:type":"article","og:image":"https://raw.githubusercontent.com/magidoc-org/magidoc/main/logo/logo_full.png"}',VITE_APP_TITLE:"Magidoc",VITE_SVELTEKIT_APP_VERSION:"1653324200025",VITE_SVELTEKIT_APP_VERSION_FILE:"_app/version.json",VITE_SVELTEKIT_APP_VERSION_POLL_INTERVAL:"0",BASE_URL:"/magidoc/_app/",MODE:"production",DEV:!1,PROD:!0});function h(c){i=c,n(2,i)}return o.$$set=c=>{"content"in c&&n(0,s=c.content),"meta"in c&&n(1,r=c.meta),"$$scope"in c&&n(6,a=c.$$scope)},[s,r,i,l,t,h,a]}class aa extends V{constructor(e){super(),z(this,e,Wt,Kt,J,{content:0,meta:1})}}export{aa as default,ta as load};
