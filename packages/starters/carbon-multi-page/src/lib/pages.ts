import { templates, type Page } from '@magidoc/plugin-starter-variables'
import type { WebsitePage, WebsiteContent } from 'src/app'
import { base } from '$app/paths'
import { createModelContent } from './model'
import { joinUrlPaths } from '@magidoc/plugin-svelte-carbon-commons'

export const appTitle = templates.APP_TITLE.vite.getOrDefault(
  import.meta.env,
  'Magidoc',
)

export const pages: ReadonlyArray<WebsiteContent> = Object.freeze(
  formatPages(
    base,
    templates.PAGES.vite.getOrDefault(
      import.meta.env,
      getDefaultPages(appTitle),
    ),
  ).concat(createModelContent()),
)

export const homePageUrl = getHomePageUrl()

function formatPages(
  base: string,
  pages: (Page | undefined)[],
): ReadonlyArray<WebsiteContent> {
  return pages
    .filter((page): page is Page => !!page)
    .map((item) => asCustomContent(base, [], item))
}

function getHomePageUrl(): string {
  const page = findFirstPage()
  if (page) return page.href

  throw new Error(
    'No custom pages or query available to use as the root application URL. You need to provide at least one custom page or your schema should contain at least one query/mutation/subscription.',
  )
}

function findFirstPage(): WebsitePage | null {
  return firstPageBy(() => true)
}

export function findPageByHref(href: string): WebsitePage | null {
  return firstPageBy((page) => page.href === href)
}

function firstPageBy(
  matcher: (page: WebsitePage) => boolean,
): WebsitePage | null {
  function iteratePages(
    pages: ReadonlyArray<WebsiteContent>,
  ): WebsitePage | null {
    for (const page of pages) {
      if (page.type === 'page' && matcher(page)) {
        return page
      }

      if (page.type === 'menu') {
        const result = iteratePages(page.children)
        if (result) return result
      }
    }

    return null
  }

  return iteratePages(pages)
}

function asCustomContent(
  base: string,
  path: string[],
  page: Page,
): WebsiteContent {
  if (typeof page.content === 'string') {
    return {
      type: 'page',
      title: page.title,
      content: page.content,
      href: joinUrlPaths(base, ...path, generatePath(page.title)),
    }
  }

  const newPath = path.concat([generatePath(page.title)])
  return {
    type: 'menu',
    title: page.title,
    children: page.content.map((child) =>
      asCustomContent(base, newPath, child),
    ),
  }
}

function generatePath(value: string): string {
  // https://github.com/markedjs/marked/blob/master/src/Slugger.js
  return (
    value
      .toLowerCase()
      .trim()
      // remove html tags
      .replace(/<[!\/a-z].*?>/gi, '')
      // remove unwanted chars
      .replace(
        /[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,
        '',
      )
      .replace(/\s/g, '-')
  )
}

function getDefaultPages(title: string): Page[] {
  return [
    {
      title: 'Introduction',
      content: [
        {
          title: 'Welcome',
          content: `
        # Welcome

        Welcome to ${title}'s GraphQL API documentation. This documentation was automatically generated by [Magidoc](https://github.com/magidoc-org/magidoc),
        a free open source static documentation generator for GraphQL.
        `
            .split('\n')
            .map((line) => line.trim())
            .join('\n'),
        },
      ],
    },
  ]
}
